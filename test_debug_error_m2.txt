
The following have been reloaded with a version change:

The following have been reloaded with a version change:
  1) flexiblas/3.3.1 => flexiblas/3.4.4       6) openmpi/4.1.5 => openmpi/5.0.3
  2) gcc/12.3 => gcc/13.3                     7) pmix/4.2.4 => pmix/5.0.2
  3) gcccore/.12.3 => gcccore/.13.3           8) ucc/1.2.0 => ucc/1.3.0
  4) hwloc/2.9.1 => hwloc/2.10.0              9) ucx/1.14.1 => ucx/1.16.0
  5) libfabric/1.18.0 => libfabric/1.21.0

  1) flexiblas/3.3.1 => flexiblas/3.4.4       6) openmpi/4.1.5 => openmpi/5.0.3
  2) gcc/12.3 => gcc/13.3                     7) pmix/4.2.4 => pmix/5.0.2
  3) gcccore/.12.3 => gcccore/.13.3           8) ucc/1.2.0 => ucc/1.3.0
  4) hwloc/2.9.1 => hwloc/2.10.0              9) ucx/1.14.1 => ucx/1.16.0
  5) libfabric/1.18.0 => libfabric/1.21.0


The following have been reloaded with a version change:
  1) flexiblas/3.3.1 => flexiblas/3.4.4       6) openmpi/4.1.5 => openmpi/5.0.3
  2) gcc/12.3 => gcc/13.3                     7) pmix/4.2.4 => pmix/5.0.2
  3) gcccore/.12.3 => gcccore/.13.3           8) ucc/1.2.0 => ucc/1.3.0
  4) hwloc/2.9.1 => hwloc/2.10.0              9) ucx/1.14.1 => ucx/1.16.0
  5) libfabric/1.18.0 => libfabric/1.21.0

03/21/2025 23:21:53 - WARNING - __main__ -   device: cuda:0, n_gpu: 1
The new embeddings will be initialized from a multivariate normal distribution that has old embeddings' mean and covariance. As described in this article: https://nlp.stanford.edu/~johnhew/vocab-expansion.html. To disable this, use `mean_resizing=False`
03/21/2025 23:21:57 - INFO - __main__ -   Training/evaluation parameters Namespace(output_dir='./saved_models', model_type='t5', encoder_block_size=512, decoder_block_size=256, beam_size=50, model_name='model.bin', checkpoint_model_name='non_domain_model.bin', model_name_or_path='../codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='../codebert-base', code_length=256, do_train=False, do_eval=False, do_test=True, load_model_from_checkpoint=False, evaluate_during_training=False, do_local_explanation=False, reasoning_method=None, train_batch_size=4, eval_batch_size=1, gradient_accumulation_steps=1, learning_rate=5e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=42, epochs=1, n_gpu=1, device=device(type='cuda', index=0))
03/21/2025 23:21:57 - WARNING - __main__ -   device: cuda:0, n_gpu: 1
03/21/2025 23:21:57 - WARNING - __main__ -   device: cuda:0, n_gpu: 1
The new embeddings will be initialized from a multivariate normal distribution that has old embeddings' mean and covariance. As described in this article: https://nlp.stanford.edu/~johnhew/vocab-expansion.html. To disable this, use `mean_resizing=False`
The new embeddings will be initialized from a multivariate normal distribution that has old embeddings' mean and covariance. As described in this article: https://nlp.stanford.edu/~johnhew/vocab-expansion.html. To disable this, use `mean_resizing=False`
03/21/2025 23:21:59 - INFO - __main__ -   Training/evaluation parameters Namespace(output_dir='./saved_models', model_type='t5', encoder_block_size=512, decoder_block_size=256, beam_size=50, model_name='model.bin', checkpoint_model_name='non_domain_model.bin', model_name_or_path='../codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='../codebert-base', code_length=256, do_train=False, do_eval=False, do_test=True, load_model_from_checkpoint=False, evaluate_during_training=False, do_local_explanation=False, reasoning_method=None, train_batch_size=4, eval_batch_size=1, gradient_accumulation_steps=1, learning_rate=5e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=42, epochs=1, n_gpu=1, device=device(type='cuda', index=0))
03/21/2025 23:21:59 - INFO - __main__ -   Training/evaluation parameters Namespace(output_dir='./saved_models', model_type='t5', encoder_block_size=512, decoder_block_size=256, beam_size=50, model_name='model.bin', checkpoint_model_name='non_domain_model.bin', model_name_or_path='../codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='../codebert-base', code_length=256, do_train=False, do_eval=False, do_test=True, load_model_from_checkpoint=False, evaluate_during_training=False, do_local_explanation=False, reasoning_method=None, train_batch_size=4, eval_batch_size=1, gradient_accumulation_steps=1, learning_rate=5e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=42, epochs=1, n_gpu=1, device=device(type='cuda', index=0))
  0%|          | 0/1706 [00:00<?, ?it/s]  0%|          | 0/1706 [00:00<?, ?it/s]  0%|          | 0/1706 [00:00<?, ?it/s]  1%|          | 15/1706 [00:00<00:12, 131.85it/s]  1%|          | 15/1706 [00:00<00:12, 131.45it/s]  1%|          | 15/1706 [00:00<00:12, 131.66it/s]  2%|▏         | 29/1706 [00:00<00:14, 117.88it/s]  2%|▏         | 29/1706 [00:00<00:14, 117.52it/s]  2%|▏         | 29/1706 [00:00<00:14, 117.68it/s]  2%|▏         | 41/1706 [00:00<00:17, 97.70it/s]   2%|▏         | 41/1706 [00:00<00:17, 96.75it/s]   2%|▏         | 41/1706 [00:00<00:17, 97.37it/s]   3%|▎         | 56/1706 [00:00<00:14, 112.99it/s]  3%|▎         | 56/1706 [00:00<00:14, 112.93it/s]  3%|▎         | 56/1706 [00:00<00:14, 112.70it/s]  4%|▍         | 68/1706 [00:00<00:16, 101.18it/s]  4%|▍         | 68/1706 [00:00<00:16, 99.99it/s]   4%|▍         | 68/1706 [00:00<00:16, 100.75it/s]  5%|▍         | 79/1706 [00:00<00:16, 97.54it/s]   5%|▍         | 79/1706 [00:00<00:16, 96.05it/s]  5%|▍         | 79/1706 [00:00<00:16, 97.18it/s]   5%|▌         | 92/1706 [00:00<00:15, 104.17it/s]  5%|▌         | 92/1706 [00:00<00:15, 103.08it/s]  5%|▌         | 92/1706 [00:00<00:15, 103.84it/s]  6%|▌         | 103/1706 [00:00<00:15, 105.09it/s]  6%|▌         | 103/1706 [00:00<00:15, 104.21it/s]  6%|▌         | 103/1706 [00:00<00:15, 104.46it/s]  7%|▋         | 116/1706 [00:01<00:16, 93.67it/s]   7%|▋         | 116/1706 [00:01<00:17, 93.32it/s]   7%|▋         | 116/1706 [00:01<00:17, 93.45it/s]   7%|▋         | 126/1706 [00:01<00:16, 93.59it/s]  7%|▋         | 126/1706 [00:01<00:16, 93.65it/s]  7%|▋         | 126/1706 [00:01<00:16, 93.44it/s]  8%|▊         | 136/1706 [00:01<00:17, 90.35it/s]  8%|▊         | 136/1706 [00:01<00:17, 90.58it/s]  8%|▊         | 136/1706 [00:01<00:17, 89.80it/s]  9%|▊         | 147/1706 [00:01<00:17, 89.81it/s]  9%|▊         | 147/1706 [00:01<00:17, 90.21it/s]  9%|▊         | 147/1706 [00:01<00:17, 89.60it/s]  9%|▉         | 157/1706 [00:01<00:17, 89.87it/s]  9%|▉         | 157/1706 [00:01<00:17, 88.25it/s]  9%|▉         | 157/1706 [00:01<00:17, 89.16it/s] 10%|▉         | 166/1706 [00:01<00:18, 84.26it/s] 10%|▉         | 166/1706 [00:01<00:18, 85.31it/s] 10%|▉         | 167/1706 [00:01<00:18, 83.85it/s] 10%|█         | 175/1706 [00:01<00:18, 83.12it/s] 10%|█         | 175/1706 [00:01<00:18, 84.09it/s] 10%|█         | 178/1706 [00:01<00:17, 89.41it/s] 11%|█         | 184/1706 [00:02<00:20, 72.95it/s] 11%|█         | 184/1706 [00:02<00:20, 73.06it/s] 11%|█         | 188/1706 [00:02<00:19, 76.05it/s] 12%|█▏        | 197/1706 [00:02<00:17, 84.09it/s] 12%|█▏        | 197/1706 [00:02<00:18, 83.62it/s] 12%|█▏        | 201/1706 [00:02<00:17, 88.38it/s] 12%|█▏        | 211/1706 [00:02<00:15, 98.24it/s] 12%|█▏        | 211/1706 [00:02<00:15, 97.16it/s] 13%|█▎        | 215/1706 [00:02<00:14, 101.37it/s] 13%|█▎        | 223/1706 [00:02<00:17, 86.63it/s] 13%|█▎        | 226/1706 [00:02<00:16, 88.22it/s]  13%|█▎        | 223/1706 [00:02<00:17, 86.20it/s] 14%|█▍        | 242/1706 [00:02<00:13, 104.90it/s] 14%|█▍        | 241/1706 [00:02<00:13, 108.53it/s] 14%|█▍        | 242/1706 [00:02<00:13, 107.73it/s] 15%|█▌        | 256/1706 [00:02<00:12, 118.60it/s] 15%|█▌        | 260/1706 [00:02<00:11, 122.00it/s] 15%|█▌        | 260/1706 [00:02<00:11, 123.72it/s] 16%|█▌        | 272/1706 [00:02<00:11, 128.09it/s] 16%|█▌        | 275/1706 [00:02<00:11, 127.89it/s] 16%|█▌        | 275/1706 [00:02<00:11, 129.32it/s] 17%|█▋        | 286/1706 [00:02<00:11, 119.66it/s] 17%|█▋        | 289/1706 [00:02<00:13, 108.26it/s] 17%|█▋        | 289/1706 [00:02<00:12, 110.37it/s] 18%|█▊        | 299/1706 [00:03<00:13, 104.14it/s] 18%|█▊        | 301/1706 [00:03<00:13, 103.74it/s] 18%|█▊        | 301/1706 [00:03<00:13, 102.06it/s] 18%|█▊        | 311/1706 [00:03<00:13, 104.67it/s] 18%|█▊        | 313/1706 [00:03<00:13, 105.60it/s] 18%|█▊        | 313/1706 [00:03<00:13, 104.35it/s] 19%|█▉        | 325/1706 [00:03<00:12, 111.71it/s] 19%|█▉        | 328/1706 [00:03<00:11, 115.66it/s] 19%|█▉        | 328/1706 [00:03<00:12, 114.83it/s] 20%|█▉        | 339/1706 [00:03<00:11, 118.48it/s] 20%|█▉        | 341/1706 [00:03<00:11, 116.97it/s] 20%|█▉        | 341/1706 [00:03<00:11, 116.38it/s] 21%|██        | 354/1706 [00:03<00:17, 77.77it/s]  21%|██        | 354/1706 [00:03<00:17, 78.03it/s]  21%|██        | 352/1706 [00:03<00:17, 76.31it/s]  21%|██▏       | 364/1706 [00:03<00:16, 81.03it/s] 21%|██▏       | 364/1706 [00:03<00:16, 81.13it/s] 21%|██        | 362/1706 [00:03<00:17, 78.83it/s] 22%|██▏       | 382/1706 [00:03<00:12, 102.67it/s] 22%|██▏       | 382/1706 [00:03<00:12, 102.42it/s] 22%|██▏       | 378/1706 [00:03<00:13, 96.03it/s] 23%|██▎       | 393/1706 [00:03<00:12, 107.79it/s] 23%|██▎       | 395/1706 [00:03<00:12, 100.96it/s] 23%|██▎       | 395/1706 [00:04<00:13, 100.67it/s] 24%|██▍       | 411/1706 [00:04<00:11, 112.73it/s] 24%|██▍       | 411/1706 [00:04<00:11, 112.64it/s] 24%|██▍       | 406/1706 [00:04<00:12, 104.61it/s] 25%|██▍       | 424/1706 [00:04<00:11, 116.32it/s] 25%|██▍       | 424/1706 [00:04<00:11, 116.10it/s] 25%|██▍       | 420/1706 [00:04<00:11, 111.68it/s] 25%|██▌       | 435/1706 [00:04<00:10, 119.38it/s] 26%|██▌       | 437/1706 [00:04<00:11, 115.26it/s] 26%|██▌       | 437/1706 [00:04<00:11, 115.25it/s] 26%|██▋       | 450/1706 [00:04<00:10, 115.04it/s] 26%|██▋       | 450/1706 [00:04<00:10, 115.01it/s] 26%|██▋       | 448/1706 [00:04<00:11, 111.51it/s] 27%|██▋       | 465/1706 [00:04<00:10, 123.99it/s] 27%|██▋       | 466/1706 [00:04<00:10, 121.55it/s] 27%|██▋       | 464/1706 [00:04<00:10, 123.25it/s] 28%|██▊       | 478/1706 [00:04<00:12, 99.84it/s]  28%|██▊       | 477/1706 [00:04<00:12, 101.13it/s] 28%|██▊       | 479/1706 [00:04<00:13, 90.50it/s]  29%|██▊       | 489/1706 [00:04<00:13, 92.80it/s] 29%|██▊       | 489/1706 [00:04<00:12, 93.81it/s]  29%|██▉       | 492/1706 [00:04<00:12, 96.16it/s] 30%|██▉       | 505/1706 [00:05<00:12, 99.45it/s] 30%|██▉       | 505/1706 [00:05<00:11, 101.92it/s] 30%|██▉       | 505/1706 [00:05<00:12, 99.64it/s] 30%|███       | 516/1706 [00:05<00:12, 97.44it/s] 30%|███       | 517/1706 [00:05<00:12, 98.03it/s]  30%|███       | 516/1706 [00:05<00:12, 97.26it/s] 31%|███       | 528/1706 [00:05<00:11, 98.91it/s] 31%|███       | 528/1706 [00:05<00:11, 99.81it/s] 31%|███       | 528/1706 [00:05<00:11, 98.50it/s] 32%|███▏      | 543/1706 [00:05<00:10, 108.38it/s] 32%|███▏      | 543/1706 [00:05<00:10, 109.77it/s] 32%|███▏      | 543/1706 [00:05<00:10, 108.19it/s] 33%|███▎      | 555/1706 [00:05<00:11, 96.90it/s]  33%|███▎      | 555/1706 [00:05<00:11, 97.67it/s]  33%|███▎      | 555/1706 [00:05<00:12, 95.74it/s]  33%|███▎      | 571/1706 [00:05<00:10, 105.08it/s] 33%|███▎      | 571/1706 [00:05<00:10, 105.74it/s] 33%|███▎      | 571/1706 [00:05<00:10, 104.18it/s] 34%|███▍      | 582/1706 [00:05<00:10, 104.45it/s] 34%|███▍      | 582/1706 [00:05<00:10, 105.08it/s] 34%|███▍      | 582/1706 [00:05<00:10, 103.70it/s] 35%|███▍      | 593/1706 [00:05<00:13, 81.44it/s]  35%|███▍      | 593/1706 [00:05<00:13, 81.62it/s]  35%|███▍      | 593/1706 [00:06<00:13, 80.66it/s]  35%|███▌      | 602/1706 [00:06<00:13, 82.43it/s] 35%|███▌      | 603/1706 [00:06<00:13, 84.44it/s] 35%|███▌      | 602/1706 [00:06<00:13, 81.76it/s] 36%|███▌      | 613/1706 [00:06<00:12, 88.88it/s] 36%|███▌      | 614/1706 [00:06<00:12, 90.12it/s] 36%|███▌      | 613/1706 [00:06<00:12, 87.35it/s] 37%|███▋      | 623/1706 [00:06<00:11, 90.55it/s] 37%|███▋      | 624/1706 [00:06<00:12, 88.27it/s] 37%|███▋      | 623/1706 [00:06<00:12, 88.65it/s] 37%|███▋      | 635/1706 [00:06<00:10, 97.59it/s] 38%|███▊      | 640/1706 [00:06<00:10, 104.98it/s] 37%|███▋      | 635/1706 [00:06<00:11, 95.36it/s] 38%|███▊      | 649/1706 [00:06<00:09, 108.36it/s] 38%|███▊      | 653/1706 [00:06<00:09, 111.58it/s] 38%|███▊      | 648/1706 [00:06<00:10, 104.56it/s] 39%|███▉      | 665/1706 [00:06<00:08, 118.98it/s] 39%|███▉      | 663/1706 [00:06<00:08, 116.28it/s] 39%|███▉      | 668/1706 [00:06<00:09, 108.86it/s] 40%|███▉      | 678/1706 [00:06<00:08, 118.77it/s] 40%|████      | 687/1706 [00:06<00:07, 129.85it/s] 40%|███▉      | 675/1706 [00:06<00:09, 112.39it/s] 41%|████      | 694/1706 [00:06<00:07, 128.81it/s] 41%|████      | 701/1706 [00:06<00:07, 131.71it/s] 41%|████      | 692/1706 [00:06<00:08, 124.32it/s] 42%|████▏     | 712/1706 [00:06<00:07, 141.14it/s] 42%|████▏     | 715/1706 [00:06<00:07, 132.57it/s] 42%|████▏     | 709/1706 [00:06<00:07, 134.17it/s] 43%|████▎     | 727/1706 [00:07<00:08, 114.54it/s] 42%|████▏     | 723/1706 [00:07<00:09, 108.26it/s] 43%|████▎     | 729/1706 [00:07<00:09, 100.77it/s] 43%|████▎     | 740/1706 [00:07<00:10, 93.44it/s]  43%|████▎     | 741/1706 [00:07<00:10, 96.40it/s]  43%|████▎     | 735/1706 [00:07<00:11, 87.70it/s]  44%|████▍     | 751/1706 [00:07<00:10, 95.50it/s] 44%|████▍     | 752/1706 [00:07<00:10, 94.64it/s] 44%|████▍     | 748/1706 [00:07<00:09, 96.51it/s] 45%|████▍     | 763/1706 [00:07<00:09, 95.05it/s] 45%|████▍     | 762/1706 [00:07<00:10, 92.19it/s] 45%|████▍     | 760/1706 [00:07<00:09, 101.67it/s] 45%|████▌     | 776/1706 [00:07<00:09, 101.06it/s] 45%|████▌     | 776/1706 [00:07<00:09, 100.27it/s] 45%|████▌     | 772/1706 [00:07<00:09, 100.35it/s] 46%|████▌     | 788/1706 [00:07<00:08, 105.70it/s] 46%|████▌     | 789/1706 [00:07<00:08, 105.75it/s] 46%|████▌     | 783/1706 [00:07<00:09, 97.98it/s]  47%|████▋     | 803/1706 [00:07<00:08, 106.01it/s] 47%|████▋     | 803/1706 [00:07<00:08, 106.10it/s] 47%|████▋     | 794/1706 [00:07<00:09, 98.86it/s] 48%|████▊     | 814/1706 [00:08<00:09, 96.68it/s]  48%|████▊     | 814/1706 [00:08<00:09, 96.32it/s]  47%|████▋     | 805/1706 [00:08<00:09, 95.85it/s] 48%|████▊     | 815/1706 [00:08<00:09, 90.99it/s] 48%|████▊     | 824/1706 [00:08<00:09, 89.97it/s] 48%|████▊     | 824/1706 [00:08<00:09, 89.60it/s] 48%|████▊     | 825/1706 [00:08<00:10, 87.73it/s] 49%|████▉     | 834/1706 [00:08<00:10, 86.80it/s] 49%|████▉     | 834/1706 [00:08<00:10, 86.47it/s] 49%|████▉     | 834/1706 [00:08<00:10, 82.49it/s] 49%|████▉     | 843/1706 [00:08<00:11, 72.90it/s] 49%|████▉     | 843/1706 [00:08<00:11, 72.57it/s] 50%|█████     | 858/1706 [00:08<00:09, 89.35it/s] 50%|█████     | 858/1706 [00:08<00:09, 89.28it/s] 49%|████▉     | 843/1706 [00:08<00:12, 69.28it/s] 50%|█████     | 858/1706 [00:08<00:09, 86.85it/s] 51%|█████     | 868/1706 [00:08<00:11, 75.89it/s] 51%|█████     | 868/1706 [00:08<00:11, 75.56it/s] 51%|█████     | 868/1706 [00:08<00:11, 74.17it/s] 51%|█████▏    | 878/1706 [00:08<00:11, 70.87it/s] 51%|█████▏    | 878/1706 [00:08<00:11, 70.65it/s] 51%|█████▏    | 878/1706 [00:09<00:11, 69.67it/s] 52%|█████▏    | 886/1706 [00:09<00:13, 60.08it/s] 52%|█████▏    | 886/1706 [00:09<00:13, 60.15it/s] 53%|█████▎    | 901/1706 [00:09<00:10, 77.69it/s] 53%|█████▎    | 901/1706 [00:09<00:10, 77.77it/s] 52%|█████▏    | 886/1706 [00:09<00:13, 59.41it/s] 53%|█████▎    | 901/1706 [00:09<00:10, 77.28it/s] 54%|█████▎    | 916/1706 [00:09<00:08, 88.66it/s] 54%|█████▎    | 916/1706 [00:09<00:08, 88.41it/s] 55%|█████▍    | 933/1706 [00:09<00:07, 106.49it/s] 55%|█████▍    | 933/1706 [00:09<00:07, 106.35it/s] 54%|█████▎    | 916/1706 [00:09<00:08, 88.32it/s] 55%|█████▍    | 933/1706 [00:09<00:07, 106.23it/s] 55%|█████▌    | 945/1706 [00:09<00:08, 90.38it/s]  55%|█████▌    | 945/1706 [00:09<00:08, 89.90it/s]  56%|█████▌    | 957/1706 [00:09<00:07, 95.74it/s] 56%|█████▌    | 957/1706 [00:09<00:07, 95.54it/s] 55%|█████▌    | 945/1706 [00:09<00:08, 90.28it/s]  57%|█████▋    | 968/1706 [00:09<00:07, 97.25it/s] 57%|█████▋    | 968/1706 [00:09<00:07, 97.17it/s] 56%|█████▌    | 957/1706 [00:09<00:07, 95.69it/s] 57%|█████▋    | 980/1706 [00:10<00:07, 97.96it/s] 57%|█████▋    | 980/1706 [00:10<00:07, 97.94it/s] 57%|█████▋    | 968/1706 [00:10<00:07, 97.04it/s] 58%|█████▊    | 994/1706 [00:10<00:06, 104.07it/s] 58%|█████▊    | 994/1706 [00:10<00:06, 104.13it/s] 57%|█████▋    | 980/1706 [00:10<00:07, 97.52it/s] 59%|█████▉    | 1008/1706 [00:10<00:06, 108.66it/s] 59%|█████▉    | 1008/1706 [00:10<00:06, 108.94it/s] 58%|█████▊    | 994/1706 [00:10<00:06, 103.71it/s] 60%|█████▉    | 1020/1706 [00:10<00:06, 107.45it/s] 60%|█████▉    | 1020/1706 [00:10<00:06, 107.77it/s] 59%|█████▉    | 1008/1706 [00:10<00:06, 108.41it/s] 60%|██████    | 1031/1706 [00:10<00:06, 105.28it/s] 60%|██████    | 1031/1706 [00:10<00:06, 104.38it/s] 60%|█████▉    | 1020/1706 [00:10<00:06, 107.17it/s] 60%|██████    | 1031/1706 [00:10<00:06, 103.85it/s] 61%|██████    | 1042/1706 [00:10<00:07, 94.78it/s]  61%|██████    | 1042/1706 [00:10<00:07, 94.81it/s]  62%|██████▏   | 1057/1706 [00:10<00:06, 107.32it/s] 62%|██████▏   | 1057/1706 [00:10<00:06, 107.58it/s] 61%|██████    | 1042/1706 [00:10<00:07, 94.36it/s]  63%|██████▎   | 1070/1706 [00:10<00:05, 112.48it/s] 63%|██████▎   | 1070/1706 [00:10<00:05, 112.65it/s] 62%|██████▏   | 1057/1706 [00:10<00:06, 106.91it/s] 64%|██████▎   | 1084/1706 [00:10<00:05, 114.56it/s] 64%|██████▎   | 1084/1706 [00:10<00:05, 114.31it/s] 63%|██████▎   | 1069/1706 [00:10<00:05, 110.31it/s] 64%|██████▎   | 1084/1706 [00:11<00:05, 114.38it/s] 64%|██████▍   | 1097/1706 [00:11<00:06, 92.94it/s]  64%|██████▍   | 1097/1706 [00:11<00:06, 92.74it/s]  65%|██████▌   | 1113/1706 [00:11<00:05, 107.62it/s] 65%|██████▌   | 1113/1706 [00:11<00:05, 107.66it/s] 64%|██████▍   | 1097/1706 [00:11<00:06, 93.02it/s]  66%|██████▌   | 1127/1706 [00:11<00:05, 115.47it/s] 66%|██████▌   | 1127/1706 [00:11<00:05, 115.14it/s] 65%|██████▌   | 1112/1706 [00:11<00:05, 106.20it/s] 66%|██████▌   | 1127/1706 [00:11<00:05, 115.57it/s] 67%|██████▋   | 1140/1706 [00:11<00:05, 102.63it/s] 67%|██████▋   | 1140/1706 [00:11<00:05, 102.41it/s] 68%|██████▊   | 1154/1706 [00:11<00:05, 109.45it/s] 68%|██████▊   | 1154/1706 [00:11<00:05, 109.55it/s] 67%|██████▋   | 1140/1706 [00:11<00:05, 103.18it/s] 68%|██████▊   | 1154/1706 [00:11<00:05, 109.96it/s] 68%|██████▊   | 1166/1706 [00:11<00:05, 102.70it/s] 68%|██████▊   | 1166/1706 [00:11<00:05, 102.78it/s] 69%|██████▉   | 1184/1706 [00:11<00:04, 121.58it/s] 69%|██████▉   | 1184/1706 [00:11<00:04, 121.72it/s] 68%|██████▊   | 1166/1706 [00:11<00:05, 103.15it/s] 70%|███████   | 1200/1706 [00:11<00:03, 128.04it/s] 70%|███████   | 1200/1706 [00:11<00:03, 128.10it/s] 69%|██████▉   | 1184/1706 [00:11<00:04, 121.75it/s] 70%|███████   | 1200/1706 [00:12<00:03, 127.83it/s] 71%|███████   | 1214/1706 [00:12<00:04, 122.47it/s] 71%|███████   | 1214/1706 [00:12<00:04, 122.21it/s] 72%|███████▏  | 1227/1706 [00:12<00:03, 120.44it/s] 72%|███████▏  | 1227/1706 [00:12<00:03, 120.43it/s] 71%|███████   | 1214/1706 [00:12<00:04, 122.59it/s] 73%|███████▎  | 1241/1706 [00:12<00:03, 123.93it/s] 73%|███████▎  | 1241/1706 [00:12<00:03, 123.96it/s] 72%|███████▏  | 1227/1706 [00:12<00:04, 119.71it/s] 73%|███████▎  | 1241/1706 [00:12<00:03, 123.08it/s] 74%|███████▎  | 1254/1706 [00:12<00:04, 105.74it/s] 74%|███████▎  | 1254/1706 [00:12<00:04, 105.54it/s] 74%|███████▍  | 1266/1706 [00:12<00:04, 105.96it/s] 74%|███████▍  | 1266/1706 [00:12<00:04, 104.68it/s] 74%|███████▎  | 1254/1706 [00:12<00:04, 105.52it/s] 75%|███████▌  | 1280/1706 [00:12<00:03, 114.30it/s] 75%|███████▌  | 1280/1706 [00:12<00:03, 112.54it/s] 74%|███████▍  | 1266/1706 [00:12<00:04, 106.39it/s] 76%|███████▌  | 1296/1706 [00:12<00:03, 125.27it/s] 76%|███████▌  | 1296/1706 [00:12<00:03, 123.79it/s] 75%|███████▌  | 1280/1706 [00:12<00:03, 114.29it/s] 76%|███████▌  | 1296/1706 [00:12<00:03, 124.63it/s] 77%|███████▋  | 1309/1706 [00:12<00:03, 106.87it/s] 77%|███████▋  | 1309/1706 [00:12<00:03, 105.93it/s] 77%|███████▋  | 1309/1706 [00:13<00:03, 106.90it/s] 77%|███████▋  | 1321/1706 [00:13<00:04, 96.23it/s]  77%|███████▋  | 1321/1706 [00:13<00:04, 95.64it/s]  78%|███████▊  | 1336/1706 [00:13<00:03, 104.69it/s] 78%|███████▊  | 1336/1706 [00:13<00:03, 104.12it/s] 77%|███████▋  | 1321/1706 [00:13<00:03, 96.32it/s]  78%|███████▊  | 1336/1706 [00:13<00:03, 104.71it/s] 79%|███████▉  | 1347/1706 [00:13<00:04, 85.78it/s]  79%|███████▉  | 1348/1706 [00:13<00:04, 84.46it/s]  79%|███████▉  | 1347/1706 [00:13<00:04, 86.31it/s]  80%|███████▉  | 1358/1706 [00:13<00:04, 85.01it/s] 80%|███████▉  | 1357/1706 [00:13<00:04, 82.30it/s] 80%|███████▉  | 1357/1706 [00:13<00:04, 82.79it/s] 80%|████████  | 1368/1706 [00:13<00:04, 73.89it/s] 80%|████████  | 1368/1706 [00:13<00:04, 73.84it/s] 81%|████████  | 1379/1706 [00:13<00:04, 79.82it/s] 81%|████████  | 1379/1706 [00:13<00:04, 79.87it/s] 80%|████████  | 1368/1706 [00:13<00:04, 74.10it/s] 82%|████████▏ | 1393/1706 [00:13<00:03, 93.26it/s] 82%|████████▏ | 1393/1706 [00:13<00:03, 93.04it/s] 81%|████████  | 1379/1706 [00:13<00:04, 79.91it/s] 83%|████████▎ | 1408/1706 [00:14<00:02, 106.49it/s] 83%|████████▎ | 1408/1706 [00:14<00:02, 106.42it/s] 82%|████████▏ | 1393/1706 [00:14<00:03, 92.92it/s] 83%|████████▎ | 1408/1706 [00:14<00:02, 106.24it/s] 83%|████████▎ | 1420/1706 [00:14<00:02, 101.86it/s] 83%|████████▎ | 1420/1706 [00:14<00:02, 102.23it/s] 84%|████████▍ | 1435/1706 [00:14<00:02, 107.33it/s] 83%|████████▎ | 1420/1706 [00:14<00:02, 102.19it/s] 84%|████████▍ | 1435/1706 [00:14<00:02, 107.71it/s] 84%|████████▍ | 1435/1706 [00:14<00:02, 107.67it/s] 85%|████████▍ | 1447/1706 [00:14<00:02, 100.94it/s] 85%|████████▍ | 1447/1706 [00:14<00:02, 100.88it/s] 85%|████████▍ | 1447/1706 [00:14<00:02, 100.93it/s] 85%|████████▌ | 1458/1706 [00:14<00:02, 94.40it/s]  85%|████████▌ | 1458/1706 [00:14<00:02, 94.32it/s]  86%|████████▌ | 1469/1706 [00:14<00:02, 94.30it/s] 86%|████████▌ | 1469/1706 [00:14<00:02, 94.24it/s] 85%|████████▌ | 1458/1706 [00:14<00:02, 94.51it/s]  86%|████████▌ | 1469/1706 [00:14<00:02, 94.49it/s] 87%|████████▋ | 1479/1706 [00:14<00:02, 78.00it/s] 87%|████████▋ | 1479/1706 [00:14<00:02, 77.90it/s] 87%|████████▋ | 1489/1706 [00:15<00:02, 82.65it/s] 87%|████████▋ | 1489/1706 [00:15<00:02, 82.71it/s] 87%|████████▋ | 1479/1706 [00:15<00:02, 78.00it/s] 88%|████████▊ | 1500/1706 [00:15<00:02, 87.61it/s] 88%|████████▊ | 1500/1706 [00:15<00:02, 87.62it/s] 87%|████████▋ | 1489/1706 [00:15<00:02, 82.85it/s] 89%|████████▊ | 1511/1706 [00:15<00:02, 89.59it/s] 89%|████████▊ | 1511/1706 [00:15<00:02, 90.04it/s] 88%|████████▊ | 1500/1706 [00:15<00:02, 86.51it/s] 90%|████████▉ | 1527/1706 [00:15<00:01, 105.29it/s] 90%|████████▉ | 1527/1706 [00:15<00:01, 106.06it/s] 89%|████████▊ | 1511/1706 [00:15<00:02, 88.75it/s] 90%|█████████ | 1540/1706 [00:15<00:01, 104.15it/s] 90%|████████▉ | 1527/1706 [00:15<00:01, 104.47it/s] 90%|█████████ | 1540/1706 [00:15<00:01, 104.66it/s] 91%|█████████ | 1551/1706 [00:15<00:01, 98.39it/s]  90%|█████████ | 1540/1706 [00:15<00:01, 103.72it/s] 91%|█████████ | 1551/1706 [00:15<00:01, 98.49it/s]  92%|█████████▏| 1563/1706 [00:15<00:01, 103.42it/s] 92%|█████████▏| 1563/1706 [00:15<00:01, 102.68it/s] 91%|█████████ | 1551/1706 [00:15<00:01, 98.18it/s]  92%|█████████▏| 1574/1706 [00:15<00:01, 101.20it/s] 92%|█████████▏| 1574/1706 [00:15<00:01, 100.51it/s] 92%|█████████▏| 1563/1706 [00:15<00:01, 102.99it/s] 92%|█████████▏| 1574/1706 [00:15<00:01, 100.68it/s] 93%|█████████▎| 1585/1706 [00:15<00:01, 86.88it/s]  93%|█████████▎| 1585/1706 [00:15<00:01, 86.91it/s]  94%|█████████▎| 1599/1706 [00:16<00:01, 96.22it/s] 94%|█████████▎| 1599/1706 [00:16<00:01, 96.56it/s] 93%|█████████▎| 1585/1706 [00:16<00:01, 87.29it/s]  95%|█████████▍| 1614/1706 [00:16<00:00, 102.76it/s] 94%|█████████▎| 1599/1706 [00:16<00:01, 96.74it/s] 95%|█████████▍| 1614/1706 [00:16<00:00, 103.14it/s] 95%|█████████▌| 1625/1706 [00:16<00:00, 98.41it/s]  95%|█████████▍| 1614/1706 [00:16<00:00, 102.82it/s] 95%|█████████▌| 1625/1706 [00:16<00:00, 97.68it/s]  96%|█████████▌| 1636/1706 [00:16<00:00, 95.67it/s] 95%|█████████▌| 1625/1706 [00:16<00:00, 98.32it/s]  96%|█████████▌| 1635/1706 [00:16<00:00, 93.01it/s] 96%|█████████▋| 1646/1706 [00:16<00:00, 92.55it/s] 96%|█████████▋| 1645/1706 [00:16<00:00, 90.46it/s] 96%|█████████▌| 1636/1706 [00:16<00:00, 95.37it/s] 97%|█████████▋| 1655/1706 [00:16<00:00, 89.88it/s] 97%|█████████▋| 1656/1706 [00:16<00:00, 87.08it/s] 96%|█████████▋| 1646/1706 [00:16<00:00, 92.09it/s] 98%|█████████▊| 1666/1706 [00:16<00:00, 94.57it/s] 98%|█████████▊| 1669/1706 [00:16<00:00, 97.55it/s] 97%|█████████▋| 1656/1706 [00:16<00:00, 86.58it/s] 98%|█████████▊| 1680/1706 [00:16<00:00, 100.64it/s] 98%|█████████▊| 1678/1706 [00:16<00:00, 98.07it/s] 98%|█████████▊| 1669/1706 [00:16<00:00, 96.86it/s] 98%|█████████▊| 1680/1706 [00:17<00:00, 99.89it/s] 99%|█████████▉| 1688/1706 [00:17<00:00, 63.29it/s] 99%|█████████▉| 1691/1706 [00:17<00:00, 64.78it/s]  99%|█████████▉| 1697/1706 [00:17<00:00, 67.98it/s] 99%|█████████▉| 1691/1706 [00:17<00:00, 65.38it/s]100%|█████████▉| 1700/1706 [00:17<00:00, 65.79it/s]100%|██████████| 1706/1706 [00:17<00:00, 97.92it/s]
03/21/2025 23:22:19 - INFO - __main__ -   ***** Debugging Inference on Small Sample *****
100%|██████████| 1706/1706 [00:17<00:00, 97.87it/s]
03/21/2025 23:22:19 - INFO - __main__ -   ***** Debugging Inference on Small Sample *****
100%|█████████▉| 1700/1706 [00:17<00:00, 66.21it/s]100%|██████████| 1706/1706 [00:17<00:00, 97.23it/s]
03/21/2025 23:22:20 - INFO - __main__ -   ***** Debugging Inference on Small Sample *****
/lustre04/scratch/rinao/VulRepair/M2_CodeBERT_PL-NL/codebert_model.py:74: UserWarning: The torch.cuda.*DtypeTensor constructors are no longer recommended. It's best to use methods such as torch.tensor(data, dtype=*, device='cuda') to create tensors. (Triggered internally at /shared_tmp/build_wheels_tmp.73843/python-3.13/torch/torch/csrc/tensor/python_tensor.cpp:78.)
  zero=torch.cuda.LongTensor(1).fill_(0)
/lustre04/scratch/rinao/VulRepair/M2_CodeBERT_PL-NL/codebert_model.py:74: UserWarning: The torch.cuda.*DtypeTensor constructors are no longer recommended. It's best to use methods such as torch.tensor(data, dtype=*, device='cuda') to create tensors. (Triggered internally at /shared_tmp/build_wheels_tmp.73843/python-3.13/torch/torch/csrc/tensor/python_tensor.cpp:78.)
  zero=torch.cuda.LongTensor(1).fill_(0)
/lustre04/scratch/rinao/VulRepair/M2_CodeBERT_PL-NL/codebert_model.py:74: UserWarning: The torch.cuda.*DtypeTensor constructors are no longer recommended. It's best to use methods such as torch.tensor(data, dtype=*, device='cuda') to create tensors. (Triggered internally at /shared_tmp/build_wheels_tmp.73843/python-3.13/torch/torch/csrc/tensor/python_tensor.cpp:78.)
  zero=torch.cuda.LongTensor(1).fill_(0)
03/21/2025 23:22:21 - INFO - __main__ -   ============================================================
03/21/2025 23:22:21 - INFO - __main__ -   Sample #1
03/21/2025 23:22:21 - INFO - __main__ -   Correct Prediction? ❌ NO
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Input IDs:
[0, 347, 9112, 12, 11338, 25156, 6979, 910, 1178, 1215, 47974, 1215, 26559, 36, 10759, 29916, 910, 1178, 1215, 24419, 1009, 910, 1178, 298, 2156, 10759, 29916, 36180, 1009, 36180, 2156, 6979, 2414, 2156, 6979, 2881, 1215, 90, 1009, 5963, 20414, 4839, 25522, 6979, 939, 25606, 29916, 910, 1178, 1215, 47974, 1215, 12595, 1009, 910, 1178, 1342, 25606, 49315, 2881, 1215, 90, 7200, 25606, 49315, 2881, 1215, 90, 19998, 25606, 2604, 2118, 30596, 1691, 1215, 448, 5330, 7496, 975, 36, 359, 7200, 2156, 359, 36180, 43839, 36180, 1215, 417, 620, 2156, 49907, 36, 49315, 2881, 1215, 90, 4839, 4839, 25606, 2604, 2118, 30596, 1691, 1215, 448, 5330, 7496, 975, 36, 359, 19998, 2156, 359, 36180, 43839, 36180, 1215, 45692, 2156, 49907, 36, 49315, 2881, 1215, 90, 4839, 4839, 25606, 939, 5457, 910, 1178, 1215, 47974, 1215, 298, 2544, 25606, 109, 25522, 910, 1178, 1342, 5457, 359, 910, 1178, 1215, 47974, 646, 939, 27779, 25606, 114, 36, 910, 1178, 1342, 43839, 486, 42666, 45994, 10649, 6997, 13709, 1215, 2881, 5871, 104, 36, 359, 910, 1178, 298, 43839, 486, 43623, 4839, 48200, 910, 1178, 1342, 43839, 3653, 479, 579, 1215, 49439, 45994, 7200, 48200, 910, 1178, 1342, 43839, 10228, 479, 579, 1215, 49439, 45994, 19998, 48200, 1437, 50265, 910, 1178, 1342, 43839, 544, 28081, 45994, 10649, 6997, 13709, 1215, 2881, 5871, 104, 36, 359, 910, 1178, 298, 43839, 544, 28081, 4839, 48200, 1437, 50266, 910, 1178, 1342, 43839, 385, 3427, 45994, 2414, 4839, 25522, 910, 1178, 1215, 47974, 1215, 298, 2544, 5457, 939, 25606, 1009, 5963, 20414, 5457, 910, 1178, 1342, 43839, 5963, 20414, 25606, 671, 36, 112, 4839, 25606, 35524, 114, 36, 48793, 939, 49095, 31946, 1215, 347, 2562, 17779, 1215, 49340, 4839, 939, 5457, 321, 25606, 35524, 150, 36, 939, 49333, 910, 1178, 1215, 47974, 1215, 298, 2544, 4839, 25606, 671, 36, 321, 4839, 25606, 35524, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Input Tokens:
<s>CWE-125 static int rx_cache_find ( const struct rx_header * rxh , const struct ip * ip , int sport , int32_t * opcode ) { int i ; struct rx_cache_entry * rxent ; uint32_t clip ; uint32_t sip ; UNALIGNED_MEMCPY ( & clip , & ip -> ip_dst , sizeof ( uint32_t ) ) ; UNALIGNED_MEMCPY ( & sip , & ip -> ip_src , sizeof ( uint32_t ) ) ; i = rx_cache_hint ; do { rxent = & rx_cache [ i ] ; if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> client . s_addr == clip && rxent -> server . s_addr == sip &&  <S2SV_StartBug>  rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) &&  <S2SV_EndBug>  rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 1 ) ; } if ( ++ i >= RX_CACHE_SIZE ) i = 0 ; } while ( i != rx_cache_hint ) ; return ( 0 ) ; }
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Decoder Input IDs:
[0, 50268, 43839, 544, 28081, 45994, 10649, 6997, 13709, 1215, 1549, 5871, 104, 1437, 50269, 36, 359, 910, 1178, 298, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Decoder Input Tokens:
<s> <S2SV_ModStart>  -> serviceId == EXTRACT_16BITS  <S2SV_ModEnd>  ( & rxh
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Prediction:
<S2SV_ModStart>  ] ) ;  <S2SV_ModEnd>  if ( xdr
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Ground Truth:
<S2SV_ModStart>  -> serviceId == EXTRACT_16BITS  <S2SV_ModEnd>  ( & rxh
03/21/2025 23:22:21 - INFO - __main__ -   ============================================================
03/21/2025 23:22:21 - INFO - __main__ -   ============================================================
03/21/2025 23:22:21 - INFO - __main__ -   Sample #1
03/21/2025 23:22:21 - INFO - __main__ -   Correct Prediction? ❌ NO
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Input IDs:
[0, 347, 9112, 12, 11338, 25156, 6979, 910, 1178, 1215, 47974, 1215, 26559, 36, 10759, 29916, 910, 1178, 1215, 24419, 1009, 910, 1178, 298, 2156, 10759, 29916, 36180, 1009, 36180, 2156, 6979, 2414, 2156, 6979, 2881, 1215, 90, 1009, 5963, 20414, 4839, 25522, 6979, 939, 25606, 29916, 910, 1178, 1215, 47974, 1215, 12595, 1009, 910, 1178, 1342, 25606, 49315, 2881, 1215, 90, 7200, 25606, 49315, 2881, 1215, 90, 19998, 25606, 2604, 2118, 30596, 1691, 1215, 448, 5330, 7496, 975, 36, 359, 7200, 2156, 359, 36180, 43839, 36180, 1215, 417, 620, 2156, 49907, 36, 49315, 2881, 1215, 90, 4839, 4839, 25606, 2604, 2118, 30596, 1691, 1215, 448, 5330, 7496, 975, 36, 359, 19998, 2156, 359, 36180, 43839, 36180, 1215, 45692, 2156, 49907, 36, 49315, 2881, 1215, 90, 4839, 4839, 25606, 939, 5457, 910, 1178, 1215, 47974, 1215, 298, 2544, 25606, 109, 25522, 910, 1178, 1342, 5457, 359, 910, 1178, 1215, 47974, 646, 939, 27779, 25606, 114, 36, 910, 1178, 1342, 43839, 486, 42666, 45994, 10649, 6997, 13709, 1215, 2881, 5871, 104, 36, 359, 910, 1178, 298, 43839, 486, 43623, 4839, 48200, 910, 1178, 1342, 43839, 3653, 479, 579, 1215, 49439, 45994, 7200, 48200, 910, 1178, 1342, 43839, 10228, 479, 579, 1215, 49439, 45994, 19998, 48200, 1437, 50265, 910, 1178, 1342, 43839, 544, 28081, 45994, 10649, 6997, 13709, 1215, 2881, 5871, 104, 36, 359, 910, 1178, 298, 43839, 544, 28081, 4839, 48200, 1437, 50266, 910, 1178, 1342, 43839, 385, 3427, 45994, 2414, 4839, 25522, 910, 1178, 1215, 47974, 1215, 298, 2544, 5457, 939, 25606, 1009, 5963, 20414, 5457, 910, 1178, 1342, 43839, 5963, 20414, 25606, 671, 36, 112, 4839, 25606, 35524, 114, 36, 48793, 939, 49095, 31946, 1215, 347, 2562, 17779, 1215, 49340, 4839, 939, 5457, 321, 25606, 35524, 150, 36, 939, 49333, 910, 1178, 1215, 47974, 1215, 298, 2544, 4839, 25606, 671, 36, 321, 4839, 25606, 35524, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Input Tokens:
<s>CWE-125 static int rx_cache_find ( const struct rx_header * rxh , const struct ip * ip , int sport , int32_t * opcode ) { int i ; struct rx_cache_entry * rxent ; uint32_t clip ; uint32_t sip ; UNALIGNED_MEMCPY ( & clip , & ip -> ip_dst , sizeof ( uint32_t ) ) ; UNALIGNED_MEMCPY ( & sip , & ip -> ip_src , sizeof ( uint32_t ) ) ; i = rx_cache_hint ; do { rxent = & rx_cache [ i ] ; if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> client . s_addr == clip && rxent -> server . s_addr == sip &&  <S2SV_StartBug>  rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) &&  <S2SV_EndBug>  rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 1 ) ; } if ( ++ i >= RX_CACHE_SIZE ) i = 0 ; } while ( i != rx_cache_hint ) ; return ( 0 ) ; }
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Decoder Input IDs:
[0, 50268, 43839, 544, 28081, 45994, 10649, 6997, 13709, 1215, 1549, 5871, 104, 1437, 50269, 36, 359, 910, 1178, 298, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Decoder Input Tokens:
<s> <S2SV_ModStart>  -> serviceId == EXTRACT_16BITS  <S2SV_ModEnd>  ( & rxh
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Prediction:
<S2SV_ModStart>  ] ) ;  <S2SV_ModEnd>  if ( xdr
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Ground Truth:
<S2SV_ModStart>  -> serviceId == EXTRACT_16BITS  <S2SV_ModEnd>  ( & rxh
03/21/2025 23:22:21 - INFO - __main__ -   ============================================================
03/21/2025 23:22:21 - INFO - __main__ -   ============================================================
03/21/2025 23:22:21 - INFO - __main__ -   Sample #1
03/21/2025 23:22:21 - INFO - __main__ -   Correct Prediction? ❌ NO
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Input IDs:
[0, 347, 9112, 12, 11338, 25156, 6979, 910, 1178, 1215, 47974, 1215, 26559, 36, 10759, 29916, 910, 1178, 1215, 24419, 1009, 910, 1178, 298, 2156, 10759, 29916, 36180, 1009, 36180, 2156, 6979, 2414, 2156, 6979, 2881, 1215, 90, 1009, 5963, 20414, 4839, 25522, 6979, 939, 25606, 29916, 910, 1178, 1215, 47974, 1215, 12595, 1009, 910, 1178, 1342, 25606, 49315, 2881, 1215, 90, 7200, 25606, 49315, 2881, 1215, 90, 19998, 25606, 2604, 2118, 30596, 1691, 1215, 448, 5330, 7496, 975, 36, 359, 7200, 2156, 359, 36180, 43839, 36180, 1215, 417, 620, 2156, 49907, 36, 49315, 2881, 1215, 90, 4839, 4839, 25606, 2604, 2118, 30596, 1691, 1215, 448, 5330, 7496, 975, 36, 359, 19998, 2156, 359, 36180, 43839, 36180, 1215, 45692, 2156, 49907, 36, 49315, 2881, 1215, 90, 4839, 4839, 25606, 939, 5457, 910, 1178, 1215, 47974, 1215, 298, 2544, 25606, 109, 25522, 910, 1178, 1342, 5457, 359, 910, 1178, 1215, 47974, 646, 939, 27779, 25606, 114, 36, 910, 1178, 1342, 43839, 486, 42666, 45994, 10649, 6997, 13709, 1215, 2881, 5871, 104, 36, 359, 910, 1178, 298, 43839, 486, 43623, 4839, 48200, 910, 1178, 1342, 43839, 3653, 479, 579, 1215, 49439, 45994, 7200, 48200, 910, 1178, 1342, 43839, 10228, 479, 579, 1215, 49439, 45994, 19998, 48200, 1437, 50265, 910, 1178, 1342, 43839, 544, 28081, 45994, 10649, 6997, 13709, 1215, 2881, 5871, 104, 36, 359, 910, 1178, 298, 43839, 544, 28081, 4839, 48200, 1437, 50266, 910, 1178, 1342, 43839, 385, 3427, 45994, 2414, 4839, 25522, 910, 1178, 1215, 47974, 1215, 298, 2544, 5457, 939, 25606, 1009, 5963, 20414, 5457, 910, 1178, 1342, 43839, 5963, 20414, 25606, 671, 36, 112, 4839, 25606, 35524, 114, 36, 48793, 939, 49095, 31946, 1215, 347, 2562, 17779, 1215, 49340, 4839, 939, 5457, 321, 25606, 35524, 150, 36, 939, 49333, 910, 1178, 1215, 47974, 1215, 298, 2544, 4839, 25606, 671, 36, 321, 4839, 25606, 35524, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Input Tokens:
<s>CWE-125 static int rx_cache_find ( const struct rx_header * rxh , const struct ip * ip , int sport , int32_t * opcode ) { int i ; struct rx_cache_entry * rxent ; uint32_t clip ; uint32_t sip ; UNALIGNED_MEMCPY ( & clip , & ip -> ip_dst , sizeof ( uint32_t ) ) ; UNALIGNED_MEMCPY ( & sip , & ip -> ip_src , sizeof ( uint32_t ) ) ; i = rx_cache_hint ; do { rxent = & rx_cache [ i ] ; if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> client . s_addr == clip && rxent -> server . s_addr == sip &&  <S2SV_StartBug>  rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) &&  <S2SV_EndBug>  rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 1 ) ; } if ( ++ i >= RX_CACHE_SIZE ) i = 0 ; } while ( i != rx_cache_hint ) ; return ( 0 ) ; }
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Decoder Input IDs:
[0, 50268, 43839, 544, 28081, 45994, 10649, 6997, 13709, 1215, 1549, 5871, 104, 1437, 50269, 36, 359, 910, 1178, 298, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Decoder Input Tokens:
<s> <S2SV_ModStart>  -> serviceId == EXTRACT_16BITS  <S2SV_ModEnd>  ( & rxh
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Prediction:
<S2SV_ModStart>  ] ) ;  <S2SV_ModEnd>  if ( xdr
03/21/2025 23:22:21 - INFO - __main__ -   
🔹 Ground Truth:
<S2SV_ModStart>  -> serviceId == EXTRACT_16BITS  <S2SV_ModEnd>  ( & rxh
03/21/2025 23:22:21 - INFO - __main__ -   ============================================================
03/21/2025 23:22:23 - INFO - __main__ -   ============================================================
03/21/2025 23:22:23 - INFO - __main__ -   Sample #2
03/21/2025 23:22:23 - INFO - __main__ -   Correct Prediction? ❌ NO
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Input IDs:
[0, 347, 9112, 12, 38444, 305, 11200, 2881, 1437, 3181, 26343, 1043, 417, 1215, 42290, 1215, 260, 337, 1215, 506, 10325, 36, 1437, 493, 1215, 293, 3809, 1215, 298, 1610, 1215, 43820, 11474, 254, 1215, 25384, 1009, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 4839, 25522, 305, 11200, 2881, 13561, 1178, 25606, 305, 11200, 2881, 26363, 1215, 10799, 5457, 132, 1009, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 38668, 1215, 10799, 25606, 305, 11200, 2881, 234, 5457, 36, 158, 1009, 26363, 1215, 10799, 4839, 25606, 13, 36, 13561, 1178, 5457, 321, 25606, 13561, 1178, 28696, 36, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 117, 1215, 428, 1344, 8488, 112, 4839, 25606, 13561, 1178, 48793, 4839, 25522, 305, 11200, 2881, 939, 2156, 1236, 2156, 449, 2156, 784, 25606, 8854, 673, 2571, 2881, 2931, 1215, 46234, 646, 37101, 27779, 25606, 8854, 673, 2571, 2881, 1717, 646, 13950, 27779, 2156, 1717, 1215, 179, 646, 22078, 27779, 2156, 1717, 1215, 995, 646, 22078, 27779, 25606, 8854, 673, 2571, 2881, 7678, 257, 1215, 338, 2156, 7678, 257, 1215, 118, 25606, 10759, 8854, 673, 2571, 2881, 1009, 11, 642, 1215, 13033, 337, 25606, 8854, 673, 2571, 2881, 1009, 26363, 1215, 48939, 25606, 8854, 673, 2571, 2881, 1009, 23815, 1215, 16254, 1215, 20338, 1215, 34108, 5457, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 23815, 1215, 16254, 1215, 20338, 1215, 34108, 25606, 10759, 8854, 673, 2571, 2881, 1009, 3222, 642, 1215, 42996, 1215, 876, 29678, 5457, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 23815, 1215, 9428, 1215, 876, 29678, 25606, 8854, 673, 2571, 2881, 1009, 3023, 5457, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 23815, 1215, 48939, 25606, 26012, 8738, 36, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 2231, 119, 506, 1215, 179, 1215, 48939, 646, 13561, 1178, 2055, 289, 8827, 1215, 35918, 1215, 28974, 1215, 574, 2796, 111, 112, 27779, 2156, 321, 2156, 17535, 9292, 1215, 1864, 41583, 1215, 21134, 487, 3732, 1215, 3764, 15118, 16416, 1215, 46758, 1009, 49907, 36, 8854, 673, 2571, 2881, 4839, 4839, 25606, 11, 642, 1215, 13033, 337, 5457, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 49892, 1215, 46797, 1215, 48939, 2055, 13561, 1178, 1009, 132, 1009, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 38668, 1215, 10799, 2055, 112, 25606, 26363, 1215, 48939, 5457, 359, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 2231, 119, 506, 1215, 179, 1215, 48939, 646, 13561, 1178, 2055, 289, 8827, 1215, 35918, 1215, 28974, 1215, 574, 2796, 111, 112, 27779, 646, 204, 1009, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 449, 1215, 13124, 27779, 25606, 13, 36, 939, 5457, 234, 111, 112, 25606, 939, 49095, 26363, 1215, 10799, 25606, 939, 480, 4839, 25522, 3023, 646, 939, 27779, 5457, 3023, 646, 939, 111, 26363, 1215, 10799, 27779, 25606, 35524, 13, 36, 939, 5457, 26363, 1215, 10799, 111, 112, 25606, 939, 49095, 321, 25606, 939, 480, 4839, 25522, 3023, 646, 939, 27779, 5457, 11, 642, 1215, 13033, 337, 646, 26363, 1215, 10799, 111, 112, 111, 939, 27779, 25606, 35524, 2]
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Input Tokens:
<s>CWE-787 WORD32 ixheaacd_complex_anal_filt ( ia_esbr_hbe_txposer_struct * ptr_hbe_txposer ) { WORD32 idx ; WORD32 anal_size = 2 * ptr_hbe_txposer -> synth_size ; WORD32 N = ( 10 * anal_size ) ; for ( idx = 0 ; idx < ( ptr_hbe_txposer -> no_bins >> 1 ) ; idx ++ ) { WORD32 i , j , k , l ; FLOAT32 window_output [ 640 ] ; FLOAT32 u [ 128 ] , u_in [ 256 ] , u_out [ 256 ] ; FLOAT32 accu_r , accu_i ; const FLOAT32 * inp_signal ; FLOAT32 * anal_buf ; FLOAT32 * analy_cos_sin_tab = ptr_hbe_txposer -> analy_cos_sin_tab ; const FLOAT32 * interp_window_coeff = ptr_hbe_txposer -> analy_wind_coeff ; FLOAT32 * x = ptr_hbe_txposer -> analy_buf ; memset ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] , 0 , TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ; inp_signal = ptr_hbe_txposer -> ptr_input_buf + idx * 2 * ptr_hbe_txposer -> synth_size + 1 ; anal_buf = & ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ; for ( i = N - 1 ; i >= anal_size ; i -- ) { x [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { x [ i ] = inp_signal [ anal_size - 1 - i ] ; }</s>
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Decoder Input IDs:
[0, 50268, 35524, 114, 36, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 1437, 50268, 4839, 36, 1009, 36, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 1437, 3181, 26343, 1043, 417, 1215, 13753, 2911, 1178, 1215, 260, 337, 1215, 3145, 90, 4839, 4839, 1437, 50269, 36, 1717, 1215, 179, 2156, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Decoder Input Tokens:
<s> <S2SV_ModStart>  } if ( ptr_hbe_txposer ->  <S2SV_ModStart>  ) ( * ( ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft ) )  <S2SV_ModEnd>  ( u_in ,
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Prediction:
<S2SV_ModStart>  ; } } else {  <S2SV_ModStart>  ) ; }
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Ground Truth:
<S2SV_ModStart>  } if ( ptr_hbe_txposer ->  <S2SV_ModStart>  ) ( * ( ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft ) )  <S2SV_ModEnd>  ( u_in ,
03/21/2025 23:22:23 - INFO - __main__ -   ============================================================
03/21/2025 23:22:23 - INFO - __main__ -   ============================================================
03/21/2025 23:22:23 - INFO - __main__ -   Sample #2
03/21/2025 23:22:23 - INFO - __main__ -   Correct Prediction? ❌ NO
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Input IDs:
[0, 347, 9112, 12, 38444, 305, 11200, 2881, 1437, 3181, 26343, 1043, 417, 1215, 42290, 1215, 260, 337, 1215, 506, 10325, 36, 1437, 493, 1215, 293, 3809, 1215, 298, 1610, 1215, 43820, 11474, 254, 1215, 25384, 1009, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 4839, 25522, 305, 11200, 2881, 13561, 1178, 25606, 305, 11200, 2881, 26363, 1215, 10799, 5457, 132, 1009, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 38668, 1215, 10799, 25606, 305, 11200, 2881, 234, 5457, 36, 158, 1009, 26363, 1215, 10799, 4839, 25606, 13, 36, 13561, 1178, 5457, 321, 25606, 13561, 1178, 28696, 36, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 117, 1215, 428, 1344, 8488, 112, 4839, 25606, 13561, 1178, 48793, 4839, 25522, 305, 11200, 2881, 939, 2156, 1236, 2156, 449, 2156, 784, 25606, 8854, 673, 2571, 2881, 2931, 1215, 46234, 646, 37101, 27779, 25606, 8854, 673, 2571, 2881, 1717, 646, 13950, 27779, 2156, 1717, 1215, 179, 646, 22078, 27779, 2156, 1717, 1215, 995, 646, 22078, 27779, 25606, 8854, 673, 2571, 2881, 7678, 257, 1215, 338, 2156, 7678, 257, 1215, 118, 25606, 10759, 8854, 673, 2571, 2881, 1009, 11, 642, 1215, 13033, 337, 25606, 8854, 673, 2571, 2881, 1009, 26363, 1215, 48939, 25606, 8854, 673, 2571, 2881, 1009, 23815, 1215, 16254, 1215, 20338, 1215, 34108, 5457, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 23815, 1215, 16254, 1215, 20338, 1215, 34108, 25606, 10759, 8854, 673, 2571, 2881, 1009, 3222, 642, 1215, 42996, 1215, 876, 29678, 5457, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 23815, 1215, 9428, 1215, 876, 29678, 25606, 8854, 673, 2571, 2881, 1009, 3023, 5457, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 23815, 1215, 48939, 25606, 26012, 8738, 36, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 2231, 119, 506, 1215, 179, 1215, 48939, 646, 13561, 1178, 2055, 289, 8827, 1215, 35918, 1215, 28974, 1215, 574, 2796, 111, 112, 27779, 2156, 321, 2156, 17535, 9292, 1215, 1864, 41583, 1215, 21134, 487, 3732, 1215, 3764, 15118, 16416, 1215, 46758, 1009, 49907, 36, 8854, 673, 2571, 2881, 4839, 4839, 25606, 11, 642, 1215, 13033, 337, 5457, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 49892, 1215, 46797, 1215, 48939, 2055, 13561, 1178, 1009, 132, 1009, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 38668, 1215, 10799, 2055, 112, 25606, 26363, 1215, 48939, 5457, 359, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 2231, 119, 506, 1215, 179, 1215, 48939, 646, 13561, 1178, 2055, 289, 8827, 1215, 35918, 1215, 28974, 1215, 574, 2796, 111, 112, 27779, 646, 204, 1009, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 449, 1215, 13124, 27779, 25606, 13, 36, 939, 5457, 234, 111, 112, 25606, 939, 49095, 26363, 1215, 10799, 25606, 939, 480, 4839, 25522, 3023, 646, 939, 27779, 5457, 3023, 646, 939, 111, 26363, 1215, 10799, 27779, 25606, 35524, 13, 36, 939, 5457, 26363, 1215, 10799, 111, 112, 25606, 939, 49095, 321, 25606, 939, 480, 4839, 25522, 3023, 646, 939, 27779, 5457, 11, 642, 1215, 13033, 337, 646, 26363, 1215, 10799, 111, 112, 111, 939, 27779, 25606, 35524, 2]
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Input Tokens:
<s>CWE-787 WORD32 ixheaacd_complex_anal_filt ( ia_esbr_hbe_txposer_struct * ptr_hbe_txposer ) { WORD32 idx ; WORD32 anal_size = 2 * ptr_hbe_txposer -> synth_size ; WORD32 N = ( 10 * anal_size ) ; for ( idx = 0 ; idx < ( ptr_hbe_txposer -> no_bins >> 1 ) ; idx ++ ) { WORD32 i , j , k , l ; FLOAT32 window_output [ 640 ] ; FLOAT32 u [ 128 ] , u_in [ 256 ] , u_out [ 256 ] ; FLOAT32 accu_r , accu_i ; const FLOAT32 * inp_signal ; FLOAT32 * anal_buf ; FLOAT32 * analy_cos_sin_tab = ptr_hbe_txposer -> analy_cos_sin_tab ; const FLOAT32 * interp_window_coeff = ptr_hbe_txposer -> analy_wind_coeff ; FLOAT32 * x = ptr_hbe_txposer -> analy_buf ; memset ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] , 0 , TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ; inp_signal = ptr_hbe_txposer -> ptr_input_buf + idx * 2 * ptr_hbe_txposer -> synth_size + 1 ; anal_buf = & ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ; for ( i = N - 1 ; i >= anal_size ; i -- ) { x [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { x [ i ] = inp_signal [ anal_size - 1 - i ] ; }</s>
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Decoder Input IDs:
[0, 50268, 35524, 114, 36, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 1437, 50268, 4839, 36, 1009, 36, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 1437, 3181, 26343, 1043, 417, 1215, 13753, 2911, 1178, 1215, 260, 337, 1215, 3145, 90, 4839, 4839, 1437, 50269, 36, 1717, 1215, 179, 2156, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Decoder Input Tokens:
<s> <S2SV_ModStart>  } if ( ptr_hbe_txposer ->  <S2SV_ModStart>  ) ( * ( ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft ) )  <S2SV_ModEnd>  ( u_in ,
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Prediction:
<S2SV_ModStart>  ; } } else {  <S2SV_ModStart>  ) ; }
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Ground Truth:
<S2SV_ModStart>  } if ( ptr_hbe_txposer ->  <S2SV_ModStart>  ) ( * ( ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft ) )  <S2SV_ModEnd>  ( u_in ,
03/21/2025 23:22:23 - INFO - __main__ -   ============================================================
03/21/2025 23:22:23 - INFO - __main__ -   ============================================================
03/21/2025 23:22:23 - INFO - __main__ -   Sample #2
03/21/2025 23:22:23 - INFO - __main__ -   Correct Prediction? ❌ NO
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Input IDs:
[0, 347, 9112, 12, 38444, 305, 11200, 2881, 1437, 3181, 26343, 1043, 417, 1215, 42290, 1215, 260, 337, 1215, 506, 10325, 36, 1437, 493, 1215, 293, 3809, 1215, 298, 1610, 1215, 43820, 11474, 254, 1215, 25384, 1009, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 4839, 25522, 305, 11200, 2881, 13561, 1178, 25606, 305, 11200, 2881, 26363, 1215, 10799, 5457, 132, 1009, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 38668, 1215, 10799, 25606, 305, 11200, 2881, 234, 5457, 36, 158, 1009, 26363, 1215, 10799, 4839, 25606, 13, 36, 13561, 1178, 5457, 321, 25606, 13561, 1178, 28696, 36, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 117, 1215, 428, 1344, 8488, 112, 4839, 25606, 13561, 1178, 48793, 4839, 25522, 305, 11200, 2881, 939, 2156, 1236, 2156, 449, 2156, 784, 25606, 8854, 673, 2571, 2881, 2931, 1215, 46234, 646, 37101, 27779, 25606, 8854, 673, 2571, 2881, 1717, 646, 13950, 27779, 2156, 1717, 1215, 179, 646, 22078, 27779, 2156, 1717, 1215, 995, 646, 22078, 27779, 25606, 8854, 673, 2571, 2881, 7678, 257, 1215, 338, 2156, 7678, 257, 1215, 118, 25606, 10759, 8854, 673, 2571, 2881, 1009, 11, 642, 1215, 13033, 337, 25606, 8854, 673, 2571, 2881, 1009, 26363, 1215, 48939, 25606, 8854, 673, 2571, 2881, 1009, 23815, 1215, 16254, 1215, 20338, 1215, 34108, 5457, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 23815, 1215, 16254, 1215, 20338, 1215, 34108, 25606, 10759, 8854, 673, 2571, 2881, 1009, 3222, 642, 1215, 42996, 1215, 876, 29678, 5457, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 23815, 1215, 9428, 1215, 876, 29678, 25606, 8854, 673, 2571, 2881, 1009, 3023, 5457, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 23815, 1215, 48939, 25606, 26012, 8738, 36, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 2231, 119, 506, 1215, 179, 1215, 48939, 646, 13561, 1178, 2055, 289, 8827, 1215, 35918, 1215, 28974, 1215, 574, 2796, 111, 112, 27779, 2156, 321, 2156, 17535, 9292, 1215, 1864, 41583, 1215, 21134, 487, 3732, 1215, 3764, 15118, 16416, 1215, 46758, 1009, 49907, 36, 8854, 673, 2571, 2881, 4839, 4839, 25606, 11, 642, 1215, 13033, 337, 5457, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 49892, 1215, 46797, 1215, 48939, 2055, 13561, 1178, 1009, 132, 1009, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 38668, 1215, 10799, 2055, 112, 25606, 26363, 1215, 48939, 5457, 359, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 2231, 119, 506, 1215, 179, 1215, 48939, 646, 13561, 1178, 2055, 289, 8827, 1215, 35918, 1215, 28974, 1215, 574, 2796, 111, 112, 27779, 646, 204, 1009, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 449, 1215, 13124, 27779, 25606, 13, 36, 939, 5457, 234, 111, 112, 25606, 939, 49095, 26363, 1215, 10799, 25606, 939, 480, 4839, 25522, 3023, 646, 939, 27779, 5457, 3023, 646, 939, 111, 26363, 1215, 10799, 27779, 25606, 35524, 13, 36, 939, 5457, 26363, 1215, 10799, 111, 112, 25606, 939, 49095, 321, 25606, 939, 480, 4839, 25522, 3023, 646, 939, 27779, 5457, 11, 642, 1215, 13033, 337, 646, 26363, 1215, 10799, 111, 112, 111, 939, 27779, 25606, 35524, 2]
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Input Tokens:
<s>CWE-787 WORD32 ixheaacd_complex_anal_filt ( ia_esbr_hbe_txposer_struct * ptr_hbe_txposer ) { WORD32 idx ; WORD32 anal_size = 2 * ptr_hbe_txposer -> synth_size ; WORD32 N = ( 10 * anal_size ) ; for ( idx = 0 ; idx < ( ptr_hbe_txposer -> no_bins >> 1 ) ; idx ++ ) { WORD32 i , j , k , l ; FLOAT32 window_output [ 640 ] ; FLOAT32 u [ 128 ] , u_in [ 256 ] , u_out [ 256 ] ; FLOAT32 accu_r , accu_i ; const FLOAT32 * inp_signal ; FLOAT32 * anal_buf ; FLOAT32 * analy_cos_sin_tab = ptr_hbe_txposer -> analy_cos_sin_tab ; const FLOAT32 * interp_window_coeff = ptr_hbe_txposer -> analy_wind_coeff ; FLOAT32 * x = ptr_hbe_txposer -> analy_buf ; memset ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] , 0 , TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ; inp_signal = ptr_hbe_txposer -> ptr_input_buf + idx * 2 * ptr_hbe_txposer -> synth_size + 1 ; anal_buf = & ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] ; for ( i = N - 1 ; i >= anal_size ; i -- ) { x [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { x [ i ] = inp_signal [ anal_size - 1 - i ] ; }</s>
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Decoder Input IDs:
[0, 50268, 35524, 114, 36, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 1437, 50268, 4839, 36, 1009, 36, 49892, 1215, 298, 1610, 1215, 43820, 11474, 254, 43839, 1437, 3181, 26343, 1043, 417, 1215, 13753, 2911, 1178, 1215, 260, 337, 1215, 3145, 90, 4839, 4839, 1437, 50269, 36, 1717, 1215, 179, 2156, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Decoder Input Tokens:
<s> <S2SV_ModStart>  } if ( ptr_hbe_txposer ->  <S2SV_ModStart>  ) ( * ( ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft ) )  <S2SV_ModEnd>  ( u_in ,
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Prediction:
<S2SV_ModStart>  ; } } else {  <S2SV_ModStart>  ) ; }
03/21/2025 23:22:23 - INFO - __main__ -   
🔹 Ground Truth:
<S2SV_ModStart>  } if ( ptr_hbe_txposer ->  <S2SV_ModStart>  ) ( * ( ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft ) )  <S2SV_ModEnd>  ( u_in ,
03/21/2025 23:22:23 - INFO - __main__ -   ============================================================
03/21/2025 23:22:27 - INFO - __main__ -   ============================================================
03/21/2025 23:22:27 - INFO - __main__ -   Sample #3
03/21/2025 23:22:27 - INFO - __main__ -   Correct Prediction? ❌ NO
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Input IDs:
[0, 347, 9112, 12, 38444, 25156, 6979, 821, 90, 5320, 10706, 37729, 29585, 36, 255, 7025, 5499, 534, 3813, 8532, 1009, 48599, 2156, 49315, 2881, 1009, 910, 8831, 2156, 49315, 2881, 885, 2156, 49315, 2881, 1368, 4839, 25522, 255, 24377, 1009, 326, 1594, 5457, 48599, 43839, 326, 1594, 25606, 29939, 37729, 29585, 500, 35543, 342, 5457, 48599, 43839, 342, 479, 2559, 25606, 39023, 16224, 1009, 49125, 5457, 48955, 25606, 39023, 16224, 1009, 181, 288, 5457, 48955, 2156, 1009, 181, 134, 5457, 48955, 2156, 1009, 181, 176, 5457, 48955, 2156, 1009, 6044, 5457, 48955, 25606, 49315, 2881, 3236, 2156, 1423, 2156, 295, 4610, 2156, 3236, 8005, 625, 25606, 326, 4339, 2072, 1215, 90, 8593, 25606, 326, 4339, 2072, 1215, 90, 14194, 1902, 25606, 49315, 2881, 22162, 1741, 34216, 2156, 6147, 1215, 4610, 25606, 49315, 2881, 26031, 2753, 47309, 5457, 48599, 43839, 22523, 25606, 326, 4339, 2072, 1215, 90, 22395, 2072, 25606, 326, 4339, 2072, 1215, 90, 49125, 10799, 25606, 6979, 2881, 31, 29, 1071, 605, 2156, 7, 29, 1071, 605, 25606, 6979, 32756, 5457, 48599, 43839, 32756, 25606, 6979, 5494, 5457, 112, 2156, 11113, 25606, 49315, 1549, 3195, 611, 34735, 25606, 22395, 2072, 5457, 255, 24377, 5320, 10706, 45698, 36, 326, 1594, 4839, 25606, 49125, 10799, 5457, 18134, 565, 24377, 45287, 1588, 352, 8108, 2072, 36, 326, 1594, 2156, 32756, 17487, 204, 4832, 155, 2156, 22395, 2072, 2156, 22, 19377, 5320, 10706, 37729, 29585, 113, 4839, 25606, 114, 36, 49125, 10799, 45994, 321, 4839, 25522, 671, 36, 321, 4839, 25606, 35524, 11113, 5457, 278, 29458, 1258, 36, 48599, 4839, 25606, 114, 36, 11113, 359, 8854, 3808, 1215, 43857, 2371, 32191, 4839, 25522, 1423, 5457, 1368, 111, 112, 25606, 7, 29, 1071, 605, 5457, 111, 36, 6979, 2881, 4839, 36, 885, 2055, 885, 4839, 25606, 35524, 1493, 25522, 1423, 5457, 321, 25606, 7, 29, 1071, 605, 5457, 111, 36, 6979, 2881, 4839, 36, 885, 111, 885, 4839, 25606, 35524, 5405, 36, 48599, 43839, 17190, 22356, 4839, 25522, 403, 9715, 3293, 3765, 3935, 36570, 1215, 24765, 1729, 26369, 12946, 4832, 403, 9715, 3293, 3765, 3935, 36570, 1215, 24765, 1729, 7976, 14940, 4832, 403, 9715, 3293, 3765, 3935, 36570, 1215, 510, 2118, 3935, 6433, 4832, 3195, 611, 34735, 5457, 112, 25606, 1108, 25606, 6814, 4832, 3195, 611, 34735, 5457, 155, 25606, 1108, 25606, 35524, 255, 24377, 14181, 27780, 48398, 196, 36, 326, 1594, 2156, 255, 7025, 11615, 3450, 1215, 500, 4581, 4186, 2076, 30549, 3808, 2156, 359, 22162, 1741, 34216, 4839, 25606, 14194, 1902, 5457, 255, 24377, 42450, 1902, 45698, 36, 326, 1594, 4839, 25606, 31, 29, 1071, 605, 5457, 36, 885, 28696, 26031, 2753, 47309, 17487, 26031, 2753, 47309, 111, 885, 4832, 321, 4839, 25606, 13, 36, 3236, 5457, 321, 25606, 3236, 28696, 1368, 25606, 3236, 49371, 295, 4610, 4839, 25522, 1437, 50265, 3236, 8005, 625, 5457, 22162, 1741, 34216, 111, 36, 3236, 2055, 48599, 43839, 3236, 1215, 48025, 4839, 7606, 22162, 1741, 34216, 25606, 1437, 50266, 295, 4610, 5457, 36, 3236, 2055, 3236, 8005, 625, 8061, 1368, 17487, 1368, 111, 3236, 4832, 3236, 8005, 625, 4839, 25606, 6147, 1215, 4610, 5457, 3236, 2055, 2]
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Input Tokens:
<s>CWE-787 static int gtStripSeparate ( TIFFRGBAImage * img , uint32 * raster , uint32 w , uint32 h ) { TIFF * tif = img -> tif ; tileSeparateRoutine put = img -> put . separate ; unsigned char * buf = NULL ; unsigned char * p0 = NULL , * p1 = NULL , * p2 = NULL , * pa = NULL ; uint32 row , y , nrow , rowstoread ; tmsize_t pos ; tmsize_t scanline ; uint32 rowsperstrip , offset_row ; uint32 imagewidth = img -> width ; tmsize_t stripsize ; tmsize_t bufsize ; int32 fromskew , toskew ; int alpha = img -> alpha ; int ret = 1 , flip ; uint16 colorchannels ; stripsize = TIFFStripSize ( tif ) ; bufsize = _TIFFMultiplySSize ( tif , alpha ? 4 : 3 , stripsize , "gtStripSeparate" ) ; if ( bufsize == 0 ) { return ( 0 ) ; } flip = setorientation ( img ) ; if ( flip & FLIP_VERTICALLY ) { y = h - 1 ; toskew = - ( int32 ) ( w + w ) ; } else { y = 0 ; toskew = - ( int32 ) ( w - w ) ; } switch ( img -> photometric ) { case PHOTOMETRIC_MINISWHITE : case PHOTOMETRIC_MINISBLACK : case PHOTOMETRIC_PALETTE : colorchannels = 1 ; break ; default : colorchannels = 3 ; break ; } TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ; scanline = TIFFScanlineSize ( tif ) ; fromskew = ( w < imagewidth ? imagewidth - w : 0 ) ; for ( row = 0 ; row < h ; row += nrow ) {  <S2SV_StartBug>  rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip ;  <S2SV_EndBug>  nrow = ( row + rowstoread > h ? h - row : rowstoread ) ; offset_row = row +</s>
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Decoder Input IDs:
[0, 50268, 295, 4610, 4839, 25522, 49315, 2881, 32196, 25606, 1437, 50268, 43839, 3236, 1215, 48025, 25606, 32196, 5457, 36, 3236, 2055, 48599, 43839, 3236, 1215, 48025, 4839, 7606, 22162, 1741, 34216, 2055, 295, 4610, 25606, 114, 36, 14194, 1902, 8061, 321, 48200, 32196, 8061, 36, 1836, 1215, 90, 4839, 36, 255, 24377, 1215, 565, 6222, 41697, 1215, 565, 1215, 30187, 1589, 14194, 1902, 4839, 4839, 25522, 255, 24377, 30192, 40884, 36, 326, 1594, 43839, 326, 1594, 1215, 38557, 23687, 2156, 255, 7025, 7389, 1848, 31723, 36, 326, 1594, 4839, 2156, 22, 49740, 50267, 2137, 19322, 50267, 179, 50267, 19377, 5320, 10706, 37729, 29585, 113, 4839, 25606, 671, 321, 25606, 35524, 1437, 50268, 2156, 49125, 10799, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 1437, 50268, 2156, 181, 288, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 1437, 50268, 2156, 181, 134, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 1437, 50268, 2156, 181, 176, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 1437, 50268, 2156, 6044, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Decoder Input Tokens:
<s> <S2SV_ModStart>  nrow ) { uint32 temp ;  <S2SV_ModStart>  -> row_offset ; temp = ( row + img -> row_offset ) % rowsperstrip + nrow ; if ( scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline ) ) { TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Integer <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> gtStripSeparate" ) ; return 0 ; }  <S2SV_ModStart>  , bufsize , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p0 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p1 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p2 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , pa , temp  <S2SV_ModEnd>  * scanline )
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Prediction:
<S2SV_ModStart>  ; uint32 stripsize ;  <S2SV_ModEnd>  temp = (
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Ground Truth:
<S2SV_ModStart>  nrow ) { uint32 temp ;  <S2SV_ModStart>  -> row_offset ; temp = ( row + img -> row_offset ) % rowsperstrip + nrow ; if ( scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline ) ) { TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Integer <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> gtStripSeparate" ) ; return 0 ; }  <S2SV_ModStart>  , bufsize , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p0 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p1 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p2 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , pa , temp  <S2SV_ModEnd>  * scanline )
03/21/2025 23:22:27 - INFO - __main__ -   ============================================================
03/21/2025 23:22:27 - INFO - __main__ -   ============================================================
03/21/2025 23:22:27 - INFO - __main__ -   Sample #3
03/21/2025 23:22:27 - INFO - __main__ -   Correct Prediction? ❌ NO
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Input IDs:
[0, 347, 9112, 12, 38444, 25156, 6979, 821, 90, 5320, 10706, 37729, 29585, 36, 255, 7025, 5499, 534, 3813, 8532, 1009, 48599, 2156, 49315, 2881, 1009, 910, 8831, 2156, 49315, 2881, 885, 2156, 49315, 2881, 1368, 4839, 25522, 255, 24377, 1009, 326, 1594, 5457, 48599, 43839, 326, 1594, 25606, 29939, 37729, 29585, 500, 35543, 342, 5457, 48599, 43839, 342, 479, 2559, 25606, 39023, 16224, 1009, 49125, 5457, 48955, 25606, 39023, 16224, 1009, 181, 288, 5457, 48955, 2156, 1009, 181, 134, 5457, 48955, 2156, 1009, 181, 176, 5457, 48955, 2156, 1009, 6044, 5457, 48955, 25606, 49315, 2881, 3236, 2156, 1423, 2156, 295, 4610, 2156, 3236, 8005, 625, 25606, 326, 4339, 2072, 1215, 90, 8593, 25606, 326, 4339, 2072, 1215, 90, 14194, 1902, 25606, 49315, 2881, 22162, 1741, 34216, 2156, 6147, 1215, 4610, 25606, 49315, 2881, 26031, 2753, 47309, 5457, 48599, 43839, 22523, 25606, 326, 4339, 2072, 1215, 90, 22395, 2072, 25606, 326, 4339, 2072, 1215, 90, 49125, 10799, 25606, 6979, 2881, 31, 29, 1071, 605, 2156, 7, 29, 1071, 605, 25606, 6979, 32756, 5457, 48599, 43839, 32756, 25606, 6979, 5494, 5457, 112, 2156, 11113, 25606, 49315, 1549, 3195, 611, 34735, 25606, 22395, 2072, 5457, 255, 24377, 5320, 10706, 45698, 36, 326, 1594, 4839, 25606, 49125, 10799, 5457, 18134, 565, 24377, 45287, 1588, 352, 8108, 2072, 36, 326, 1594, 2156, 32756, 17487, 204, 4832, 155, 2156, 22395, 2072, 2156, 22, 19377, 5320, 10706, 37729, 29585, 113, 4839, 25606, 114, 36, 49125, 10799, 45994, 321, 4839, 25522, 671, 36, 321, 4839, 25606, 35524, 11113, 5457, 278, 29458, 1258, 36, 48599, 4839, 25606, 114, 36, 11113, 359, 8854, 3808, 1215, 43857, 2371, 32191, 4839, 25522, 1423, 5457, 1368, 111, 112, 25606, 7, 29, 1071, 605, 5457, 111, 36, 6979, 2881, 4839, 36, 885, 2055, 885, 4839, 25606, 35524, 1493, 25522, 1423, 5457, 321, 25606, 7, 29, 1071, 605, 5457, 111, 36, 6979, 2881, 4839, 36, 885, 111, 885, 4839, 25606, 35524, 5405, 36, 48599, 43839, 17190, 22356, 4839, 25522, 403, 9715, 3293, 3765, 3935, 36570, 1215, 24765, 1729, 26369, 12946, 4832, 403, 9715, 3293, 3765, 3935, 36570, 1215, 24765, 1729, 7976, 14940, 4832, 403, 9715, 3293, 3765, 3935, 36570, 1215, 510, 2118, 3935, 6433, 4832, 3195, 611, 34735, 5457, 112, 25606, 1108, 25606, 6814, 4832, 3195, 611, 34735, 5457, 155, 25606, 1108, 25606, 35524, 255, 24377, 14181, 27780, 48398, 196, 36, 326, 1594, 2156, 255, 7025, 11615, 3450, 1215, 500, 4581, 4186, 2076, 30549, 3808, 2156, 359, 22162, 1741, 34216, 4839, 25606, 14194, 1902, 5457, 255, 24377, 42450, 1902, 45698, 36, 326, 1594, 4839, 25606, 31, 29, 1071, 605, 5457, 36, 885, 28696, 26031, 2753, 47309, 17487, 26031, 2753, 47309, 111, 885, 4832, 321, 4839, 25606, 13, 36, 3236, 5457, 321, 25606, 3236, 28696, 1368, 25606, 3236, 49371, 295, 4610, 4839, 25522, 1437, 50265, 3236, 8005, 625, 5457, 22162, 1741, 34216, 111, 36, 3236, 2055, 48599, 43839, 3236, 1215, 48025, 4839, 7606, 22162, 1741, 34216, 25606, 1437, 50266, 295, 4610, 5457, 36, 3236, 2055, 3236, 8005, 625, 8061, 1368, 17487, 1368, 111, 3236, 4832, 3236, 8005, 625, 4839, 25606, 6147, 1215, 4610, 5457, 3236, 2055, 2]
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Input Tokens:
<s>CWE-787 static int gtStripSeparate ( TIFFRGBAImage * img , uint32 * raster , uint32 w , uint32 h ) { TIFF * tif = img -> tif ; tileSeparateRoutine put = img -> put . separate ; unsigned char * buf = NULL ; unsigned char * p0 = NULL , * p1 = NULL , * p2 = NULL , * pa = NULL ; uint32 row , y , nrow , rowstoread ; tmsize_t pos ; tmsize_t scanline ; uint32 rowsperstrip , offset_row ; uint32 imagewidth = img -> width ; tmsize_t stripsize ; tmsize_t bufsize ; int32 fromskew , toskew ; int alpha = img -> alpha ; int ret = 1 , flip ; uint16 colorchannels ; stripsize = TIFFStripSize ( tif ) ; bufsize = _TIFFMultiplySSize ( tif , alpha ? 4 : 3 , stripsize , "gtStripSeparate" ) ; if ( bufsize == 0 ) { return ( 0 ) ; } flip = setorientation ( img ) ; if ( flip & FLIP_VERTICALLY ) { y = h - 1 ; toskew = - ( int32 ) ( w + w ) ; } else { y = 0 ; toskew = - ( int32 ) ( w - w ) ; } switch ( img -> photometric ) { case PHOTOMETRIC_MINISWHITE : case PHOTOMETRIC_MINISBLACK : case PHOTOMETRIC_PALETTE : colorchannels = 1 ; break ; default : colorchannels = 3 ; break ; } TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ; scanline = TIFFScanlineSize ( tif ) ; fromskew = ( w < imagewidth ? imagewidth - w : 0 ) ; for ( row = 0 ; row < h ; row += nrow ) {  <S2SV_StartBug>  rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip ;  <S2SV_EndBug>  nrow = ( row + rowstoread > h ? h - row : rowstoread ) ; offset_row = row +</s>
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Decoder Input IDs:
[0, 50268, 295, 4610, 4839, 25522, 49315, 2881, 32196, 25606, 1437, 50268, 43839, 3236, 1215, 48025, 25606, 32196, 5457, 36, 3236, 2055, 48599, 43839, 3236, 1215, 48025, 4839, 7606, 22162, 1741, 34216, 2055, 295, 4610, 25606, 114, 36, 14194, 1902, 8061, 321, 48200, 32196, 8061, 36, 1836, 1215, 90, 4839, 36, 255, 24377, 1215, 565, 6222, 41697, 1215, 565, 1215, 30187, 1589, 14194, 1902, 4839, 4839, 25522, 255, 24377, 30192, 40884, 36, 326, 1594, 43839, 326, 1594, 1215, 38557, 23687, 2156, 255, 7025, 7389, 1848, 31723, 36, 326, 1594, 4839, 2156, 22, 49740, 50267, 2137, 19322, 50267, 179, 50267, 19377, 5320, 10706, 37729, 29585, 113, 4839, 25606, 671, 321, 25606, 35524, 1437, 50268, 2156, 49125, 10799, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 1437, 50268, 2156, 181, 288, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 1437, 50268, 2156, 181, 134, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 1437, 50268, 2156, 181, 176, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 1437, 50268, 2156, 6044, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Decoder Input Tokens:
<s> <S2SV_ModStart>  nrow ) { uint32 temp ;  <S2SV_ModStart>  -> row_offset ; temp = ( row + img -> row_offset ) % rowsperstrip + nrow ; if ( scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline ) ) { TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Integer <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> gtStripSeparate" ) ; return 0 ; }  <S2SV_ModStart>  , bufsize , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p0 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p1 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p2 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , pa , temp  <S2SV_ModEnd>  * scanline )
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Prediction:
<S2SV_ModStart>  ; uint32 stripsize ;  <S2SV_ModEnd>  temp = (
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Ground Truth:
<S2SV_ModStart>  nrow ) { uint32 temp ;  <S2SV_ModStart>  -> row_offset ; temp = ( row + img -> row_offset ) % rowsperstrip + nrow ; if ( scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline ) ) { TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Integer <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> gtStripSeparate" ) ; return 0 ; }  <S2SV_ModStart>  , bufsize , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p0 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p1 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p2 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , pa , temp  <S2SV_ModEnd>  * scanline )
03/21/2025 23:22:27 - INFO - __main__ -   ============================================================
03/21/2025 23:22:27 - INFO - __main__ -   ============================================================
03/21/2025 23:22:27 - INFO - __main__ -   Sample #3
03/21/2025 23:22:27 - INFO - __main__ -   Correct Prediction? ❌ NO
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Input IDs:
[0, 347, 9112, 12, 38444, 25156, 6979, 821, 90, 5320, 10706, 37729, 29585, 36, 255, 7025, 5499, 534, 3813, 8532, 1009, 48599, 2156, 49315, 2881, 1009, 910, 8831, 2156, 49315, 2881, 885, 2156, 49315, 2881, 1368, 4839, 25522, 255, 24377, 1009, 326, 1594, 5457, 48599, 43839, 326, 1594, 25606, 29939, 37729, 29585, 500, 35543, 342, 5457, 48599, 43839, 342, 479, 2559, 25606, 39023, 16224, 1009, 49125, 5457, 48955, 25606, 39023, 16224, 1009, 181, 288, 5457, 48955, 2156, 1009, 181, 134, 5457, 48955, 2156, 1009, 181, 176, 5457, 48955, 2156, 1009, 6044, 5457, 48955, 25606, 49315, 2881, 3236, 2156, 1423, 2156, 295, 4610, 2156, 3236, 8005, 625, 25606, 326, 4339, 2072, 1215, 90, 8593, 25606, 326, 4339, 2072, 1215, 90, 14194, 1902, 25606, 49315, 2881, 22162, 1741, 34216, 2156, 6147, 1215, 4610, 25606, 49315, 2881, 26031, 2753, 47309, 5457, 48599, 43839, 22523, 25606, 326, 4339, 2072, 1215, 90, 22395, 2072, 25606, 326, 4339, 2072, 1215, 90, 49125, 10799, 25606, 6979, 2881, 31, 29, 1071, 605, 2156, 7, 29, 1071, 605, 25606, 6979, 32756, 5457, 48599, 43839, 32756, 25606, 6979, 5494, 5457, 112, 2156, 11113, 25606, 49315, 1549, 3195, 611, 34735, 25606, 22395, 2072, 5457, 255, 24377, 5320, 10706, 45698, 36, 326, 1594, 4839, 25606, 49125, 10799, 5457, 18134, 565, 24377, 45287, 1588, 352, 8108, 2072, 36, 326, 1594, 2156, 32756, 17487, 204, 4832, 155, 2156, 22395, 2072, 2156, 22, 19377, 5320, 10706, 37729, 29585, 113, 4839, 25606, 114, 36, 49125, 10799, 45994, 321, 4839, 25522, 671, 36, 321, 4839, 25606, 35524, 11113, 5457, 278, 29458, 1258, 36, 48599, 4839, 25606, 114, 36, 11113, 359, 8854, 3808, 1215, 43857, 2371, 32191, 4839, 25522, 1423, 5457, 1368, 111, 112, 25606, 7, 29, 1071, 605, 5457, 111, 36, 6979, 2881, 4839, 36, 885, 2055, 885, 4839, 25606, 35524, 1493, 25522, 1423, 5457, 321, 25606, 7, 29, 1071, 605, 5457, 111, 36, 6979, 2881, 4839, 36, 885, 111, 885, 4839, 25606, 35524, 5405, 36, 48599, 43839, 17190, 22356, 4839, 25522, 403, 9715, 3293, 3765, 3935, 36570, 1215, 24765, 1729, 26369, 12946, 4832, 403, 9715, 3293, 3765, 3935, 36570, 1215, 24765, 1729, 7976, 14940, 4832, 403, 9715, 3293, 3765, 3935, 36570, 1215, 510, 2118, 3935, 6433, 4832, 3195, 611, 34735, 5457, 112, 25606, 1108, 25606, 6814, 4832, 3195, 611, 34735, 5457, 155, 25606, 1108, 25606, 35524, 255, 24377, 14181, 27780, 48398, 196, 36, 326, 1594, 2156, 255, 7025, 11615, 3450, 1215, 500, 4581, 4186, 2076, 30549, 3808, 2156, 359, 22162, 1741, 34216, 4839, 25606, 14194, 1902, 5457, 255, 24377, 42450, 1902, 45698, 36, 326, 1594, 4839, 25606, 31, 29, 1071, 605, 5457, 36, 885, 28696, 26031, 2753, 47309, 17487, 26031, 2753, 47309, 111, 885, 4832, 321, 4839, 25606, 13, 36, 3236, 5457, 321, 25606, 3236, 28696, 1368, 25606, 3236, 49371, 295, 4610, 4839, 25522, 1437, 50265, 3236, 8005, 625, 5457, 22162, 1741, 34216, 111, 36, 3236, 2055, 48599, 43839, 3236, 1215, 48025, 4839, 7606, 22162, 1741, 34216, 25606, 1437, 50266, 295, 4610, 5457, 36, 3236, 2055, 3236, 8005, 625, 8061, 1368, 17487, 1368, 111, 3236, 4832, 3236, 8005, 625, 4839, 25606, 6147, 1215, 4610, 5457, 3236, 2055, 2]
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Input Tokens:
<s>CWE-787 static int gtStripSeparate ( TIFFRGBAImage * img , uint32 * raster , uint32 w , uint32 h ) { TIFF * tif = img -> tif ; tileSeparateRoutine put = img -> put . separate ; unsigned char * buf = NULL ; unsigned char * p0 = NULL , * p1 = NULL , * p2 = NULL , * pa = NULL ; uint32 row , y , nrow , rowstoread ; tmsize_t pos ; tmsize_t scanline ; uint32 rowsperstrip , offset_row ; uint32 imagewidth = img -> width ; tmsize_t stripsize ; tmsize_t bufsize ; int32 fromskew , toskew ; int alpha = img -> alpha ; int ret = 1 , flip ; uint16 colorchannels ; stripsize = TIFFStripSize ( tif ) ; bufsize = _TIFFMultiplySSize ( tif , alpha ? 4 : 3 , stripsize , "gtStripSeparate" ) ; if ( bufsize == 0 ) { return ( 0 ) ; } flip = setorientation ( img ) ; if ( flip & FLIP_VERTICALLY ) { y = h - 1 ; toskew = - ( int32 ) ( w + w ) ; } else { y = 0 ; toskew = - ( int32 ) ( w - w ) ; } switch ( img -> photometric ) { case PHOTOMETRIC_MINISWHITE : case PHOTOMETRIC_MINISBLACK : case PHOTOMETRIC_PALETTE : colorchannels = 1 ; break ; default : colorchannels = 3 ; break ; } TIFFGetFieldDefaulted ( tif , TIFFTAG_ROWSPERSTRIP , & rowsperstrip ) ; scanline = TIFFScanlineSize ( tif ) ; fromskew = ( w < imagewidth ? imagewidth - w : 0 ) ; for ( row = 0 ; row < h ; row += nrow ) {  <S2SV_StartBug>  rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip ;  <S2SV_EndBug>  nrow = ( row + rowstoread > h ? h - row : rowstoread ) ; offset_row = row +</s>
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Decoder Input IDs:
[0, 50268, 295, 4610, 4839, 25522, 49315, 2881, 32196, 25606, 1437, 50268, 43839, 3236, 1215, 48025, 25606, 32196, 5457, 36, 3236, 2055, 48599, 43839, 3236, 1215, 48025, 4839, 7606, 22162, 1741, 34216, 2055, 295, 4610, 25606, 114, 36, 14194, 1902, 8061, 321, 48200, 32196, 8061, 36, 1836, 1215, 90, 4839, 36, 255, 24377, 1215, 565, 6222, 41697, 1215, 565, 1215, 30187, 1589, 14194, 1902, 4839, 4839, 25522, 255, 24377, 30192, 40884, 36, 326, 1594, 43839, 326, 1594, 1215, 38557, 23687, 2156, 255, 7025, 7389, 1848, 31723, 36, 326, 1594, 4839, 2156, 22, 49740, 50267, 2137, 19322, 50267, 179, 50267, 19377, 5320, 10706, 37729, 29585, 113, 4839, 25606, 671, 321, 25606, 35524, 1437, 50268, 2156, 49125, 10799, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 1437, 50268, 2156, 181, 288, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 1437, 50268, 2156, 181, 134, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 1437, 50268, 2156, 181, 176, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 1437, 50268, 2156, 6044, 2156, 32196, 1437, 50269, 1009, 14194, 1902, 4839, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Decoder Input Tokens:
<s> <S2SV_ModStart>  nrow ) { uint32 temp ;  <S2SV_ModStart>  -> row_offset ; temp = ( row + img -> row_offset ) % rowsperstrip + nrow ; if ( scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline ) ) { TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Integer <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> gtStripSeparate" ) ; return 0 ; }  <S2SV_ModStart>  , bufsize , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p0 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p1 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p2 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , pa , temp  <S2SV_ModEnd>  * scanline )
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Prediction:
<S2SV_ModStart>  ; uint32 stripsize ;  <S2SV_ModEnd>  temp = (
03/21/2025 23:22:27 - INFO - __main__ -   
🔹 Ground Truth:
<S2SV_ModStart>  nrow ) { uint32 temp ;  <S2SV_ModStart>  -> row_offset ; temp = ( row + img -> row_offset ) % rowsperstrip + nrow ; if ( scanline > 0 && temp > ( size_t ) ( TIFF_TMSIZE_T_MAX / scanline ) ) { TIFFErrorExt ( tif -> tif_clientdata , TIFFFileName ( tif ) , "Integer <S2SV_blank> overflow <S2SV_blank> in <S2SV_blank> gtStripSeparate" ) ; return 0 ; }  <S2SV_ModStart>  , bufsize , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p0 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p1 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , p2 , temp  <S2SV_ModEnd>  * scanline )  <S2SV_ModStart>  , pa , temp  <S2SV_ModEnd>  * scanline )
03/21/2025 23:22:27 - INFO - __main__ -   ============================================================
