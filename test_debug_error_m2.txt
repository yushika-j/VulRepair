
The following have been reloaded with a version change:
  1) flexiblas/3.3.1 => flexiblas/3.4.4       6) openmpi/4.1.5 => openmpi/5.0.3
  2) gcc/12.3 => gcc/13.3                     7) pmix/4.2.4 => pmix/5.0.2
  3) gcccore/.12.3 => gcccore/.13.3           8) ucc/1.2.0 => ucc/1.3.0
  4) hwloc/2.9.1 => hwloc/2.10.0              9) ucx/1.14.1 => ucx/1.16.0
  5) libfabric/1.18.0 => libfabric/1.21.0

03/21/2025 22:45:16 - WARNING - __main__ -   device: cuda:0, n_gpu: 1
The new embeddings will be initialized from a multivariate normal distribution that has old embeddings' mean and covariance. As described in this article: https://nlp.stanford.edu/~johnhew/vocab-expansion.html. To disable this, use `mean_resizing=False`
03/21/2025 22:45:19 - INFO - __main__ -   Training/evaluation parameters Namespace(output_dir='./saved_models', model_type='t5', encoder_block_size=512, decoder_block_size=256, beam_size=50, model_name='model.bin', checkpoint_model_name='non_domain_model.bin', model_name_or_path='../codebert-base', config_name='', use_non_pretrained_model=False, tokenizer_name='../codebert-base', code_length=256, do_train=False, do_eval=False, do_test=True, load_model_from_checkpoint=False, evaluate_during_training=False, do_local_explanation=False, reasoning_method=None, train_batch_size=4, eval_batch_size=1, gradient_accumulation_steps=1, learning_rate=5e-05, weight_decay=0.0, adam_epsilon=1e-08, max_grad_norm=1.0, max_steps=-1, warmup_steps=0, seed=42, epochs=1, n_gpu=1, device=device(type='cuda', index=0))
  0%|          | 0/1706 [00:00<?, ?it/s]  1%|          | 14/1706 [00:00<00:12, 139.07it/s]  2%|▏         | 28/1706 [00:00<00:14, 114.47it/s]  2%|▏         | 40/1706 [00:00<00:17, 94.73it/s]   3%|▎         | 56/1706 [00:00<00:14, 113.31it/s]  4%|▍         | 68/1706 [00:00<00:16, 101.03it/s]  5%|▍         | 79/1706 [00:00<00:16, 97.44it/s]   5%|▌         | 92/1706 [00:00<00:15, 104.15it/s]  6%|▌         | 103/1706 [00:00<00:15, 104.87it/s]  7%|▋         | 116/1706 [00:01<00:17, 93.53it/s]   7%|▋         | 126/1706 [00:01<00:16, 93.74it/s]  8%|▊         | 136/1706 [00:01<00:17, 90.47it/s]  9%|▊         | 147/1706 [00:01<00:17, 89.98it/s]  9%|▉         | 157/1706 [00:01<00:17, 89.52it/s] 10%|▉         | 167/1706 [00:01<00:18, 83.17it/s] 10%|█         | 178/1706 [00:01<00:17, 88.83it/s] 11%|█         | 188/1706 [00:02<00:20, 75.83it/s] 12%|█▏        | 201/1706 [00:02<00:17, 88.30it/s] 13%|█▎        | 215/1706 [00:02<00:14, 101.13it/s] 13%|█▎        | 226/1706 [00:02<00:16, 87.77it/s]  14%|█▍        | 242/1706 [00:02<00:14, 104.19it/s] 15%|█▌        | 260/1706 [00:02<00:11, 121.68it/s] 16%|█▌        | 275/1706 [00:02<00:11, 127.87it/s] 17%|█▋        | 289/1706 [00:02<00:12, 109.09it/s] 18%|█▊        | 301/1706 [00:03<00:13, 103.14it/s] 18%|█▊        | 313/1706 [00:03<00:13, 104.86it/s] 19%|█▉        | 327/1706 [00:03<00:12, 113.77it/s] 20%|█▉        | 341/1706 [00:03<00:11, 116.11it/s] 21%|██        | 353/1706 [00:03<00:17, 77.69it/s]  21%|██▏       | 363/1706 [00:03<00:16, 79.89it/s] 22%|██▏       | 381/1706 [00:03<00:13, 100.84it/s] 23%|██▎       | 395/1706 [00:04<00:12, 101.16it/s] 24%|██▍       | 411/1706 [00:04<00:11, 112.67it/s] 25%|██▍       | 424/1706 [00:04<00:11, 116.01it/s] 26%|██▌       | 437/1706 [00:04<00:11, 115.17it/s] 26%|██▋       | 450/1706 [00:04<00:10, 115.07it/s] 27%|██▋       | 465/1706 [00:04<00:09, 124.38it/s] 28%|██▊       | 478/1706 [00:04<00:12, 100.08it/s] 29%|██▊       | 489/1706 [00:04<00:13, 93.03it/s]  30%|██▉       | 505/1706 [00:05<00:12, 99.45it/s] 30%|███       | 516/1706 [00:05<00:12, 97.31it/s] 31%|███       | 528/1706 [00:05<00:11, 98.88it/s] 32%|███▏      | 543/1706 [00:05<00:10, 108.85it/s] 33%|███▎      | 555/1706 [00:05<00:11, 97.10it/s]  33%|███▎      | 571/1706 [00:05<00:10, 105.26it/s] 34%|███▍      | 582/1706 [00:05<00:10, 104.77it/s] 35%|███▍      | 593/1706 [00:05<00:13, 81.43it/s]  35%|███▌      | 602/1706 [00:06<00:13, 82.47it/s] 36%|███▌      | 613/1706 [00:06<00:12, 88.88it/s] 37%|███▋      | 623/1706 [00:06<00:11, 90.79it/s] 37%|███▋      | 635/1706 [00:06<00:10, 98.27it/s] 38%|███▊      | 649/1706 [00:06<00:09, 109.03it/s] 39%|███▉      | 665/1706 [00:06<00:08, 119.47it/s] 40%|███▉      | 678/1706 [00:06<00:08, 119.64it/s] 41%|████      | 694/1706 [00:06<00:07, 129.28it/s] 42%|████▏     | 712/1706 [00:06<00:07, 141.64it/s] 43%|████▎     | 727/1706 [00:07<00:08, 114.85it/s] 43%|████▎     | 740/1706 [00:07<00:10, 93.59it/s]  44%|████▍     | 751/1706 [00:07<00:09, 96.10it/s] 45%|████▍     | 762/1706 [00:07<00:10, 93.07it/s] 45%|████▌     | 775/1706 [00:07<00:09, 100.97it/s] 46%|████▌     | 786/1706 [00:07<00:09, 101.55it/s] 47%|████▋     | 802/1706 [00:07<00:07, 116.26it/s] 48%|████▊     | 815/1706 [00:08<00:09, 92.60it/s]  48%|████▊     | 826/1706 [00:08<00:09, 91.41it/s] 49%|████▉     | 836/1706 [00:08<00:11, 78.67it/s] 50%|████▉     | 845/1706 [00:08<00:11, 75.31it/s] 50%|█████     | 859/1706 [00:08<00:10, 82.00it/s] 51%|█████     | 868/1706 [00:08<00:10, 77.94it/s] 51%|█████▏    | 878/1706 [00:08<00:11, 72.17it/s] 52%|█████▏    | 886/1706 [00:09<00:13, 60.96it/s] 53%|█████▎    | 901/1706 [00:09<00:10, 78.97it/s] 54%|█████▎    | 916/1706 [00:09<00:08, 89.85it/s] 55%|█████▍    | 933/1706 [00:09<00:07, 107.60it/s] 55%|█████▌    | 945/1706 [00:09<00:08, 91.10it/s]  56%|█████▌    | 957/1706 [00:09<00:07, 96.67it/s] 57%|█████▋    | 968/1706 [00:09<00:07, 98.08it/s] 57%|█████▋    | 980/1706 [00:10<00:07, 98.35it/s] 58%|█████▊    | 994/1706 [00:10<00:06, 104.64it/s] 59%|█████▉    | 1008/1706 [00:10<00:06, 109.32it/s] 60%|█████▉    | 1020/1706 [00:10<00:06, 107.93it/s] 60%|██████    | 1031/1706 [00:10<00:06, 105.31it/s] 61%|██████    | 1042/1706 [00:10<00:06, 95.11it/s]  62%|██████▏   | 1057/1706 [00:10<00:06, 107.88it/s] 63%|██████▎   | 1070/1706 [00:10<00:05, 112.99it/s] 64%|██████▎   | 1084/1706 [00:10<00:05, 114.94it/s] 64%|██████▍   | 1097/1706 [00:11<00:06, 93.08it/s]  65%|██████▌   | 1113/1706 [00:11<00:05, 107.85it/s] 66%|██████▌   | 1127/1706 [00:11<00:05, 115.40it/s] 67%|██████▋   | 1140/1706 [00:11<00:05, 102.49it/s] 68%|██████▊   | 1154/1706 [00:11<00:05, 109.48it/s] 68%|██████▊   | 1166/1706 [00:11<00:05, 102.57it/s] 69%|██████▉   | 1184/1706 [00:11<00:04, 121.57it/s] 70%|███████   | 1200/1706 [00:11<00:03, 127.71it/s] 71%|███████   | 1214/1706 [00:12<00:04, 122.02it/s] 72%|███████▏  | 1227/1706 [00:12<00:03, 120.32it/s] 73%|███████▎  | 1241/1706 [00:12<00:03, 123.86it/s] 74%|███████▎  | 1254/1706 [00:12<00:04, 105.89it/s] 74%|███████▍  | 1266/1706 [00:12<00:04, 106.92it/s] 75%|███████▌  | 1280/1706 [00:12<00:03, 114.92it/s] 76%|███████▌  | 1296/1706 [00:12<00:03, 126.08it/s] 77%|███████▋  | 1310/1706 [00:12<00:03, 109.02it/s] 77%|███████▋  | 1322/1706 [00:13<00:03, 96.79it/s]  78%|███████▊  | 1336/1706 [00:13<00:03, 104.41it/s] 79%|███████▉  | 1348/1706 [00:13<00:04, 84.09it/s]  80%|███████▉  | 1358/1706 [00:13<00:04, 84.67it/s] 80%|████████  | 1368/1706 [00:13<00:04, 73.93it/s] 81%|████████  | 1379/1706 [00:13<00:04, 80.03it/s] 82%|████████▏ | 1393/1706 [00:13<00:03, 93.37it/s] 83%|████████▎ | 1408/1706 [00:14<00:02, 106.90it/s] 83%|████████▎ | 1420/1706 [00:14<00:02, 102.63it/s] 84%|████████▍ | 1435/1706 [00:14<00:02, 108.19it/s] 85%|████████▍ | 1447/1706 [00:14<00:02, 101.42it/s] 85%|████████▌ | 1458/1706 [00:14<00:02, 94.78it/s]  86%|████████▌ | 1469/1706 [00:14<00:02, 94.67it/s] 87%|████████▋ | 1479/1706 [00:14<00:02, 77.96it/s] 87%|████████▋ | 1489/1706 [00:14<00:02, 82.33it/s] 88%|████████▊ | 1500/1706 [00:15<00:02, 86.54it/s] 89%|████████▊ | 1511/1706 [00:15<00:02, 88.93it/s] 90%|████████▉ | 1527/1706 [00:15<00:01, 104.93it/s] 90%|█████████ | 1540/1706 [00:15<00:01, 104.06it/s] 91%|█████████ | 1551/1706 [00:15<00:01, 98.58it/s]  92%|█████████▏| 1563/1706 [00:15<00:01, 103.51it/s] 92%|█████████▏| 1574/1706 [00:15<00:01, 101.21it/s] 93%|█████████▎| 1585/1706 [00:15<00:01, 87.42it/s]  94%|█████████▎| 1599/1706 [00:16<00:01, 97.06it/s] 95%|█████████▍| 1614/1706 [00:16<00:00, 103.36it/s] 95%|█████████▌| 1625/1706 [00:16<00:00, 98.96it/s]  96%|█████████▌| 1636/1706 [00:16<00:00, 95.90it/s] 96%|█████████▋| 1646/1706 [00:16<00:00, 92.59it/s] 97%|█████████▋| 1656/1706 [00:16<00:00, 86.94it/s] 98%|█████████▊| 1669/1706 [00:16<00:00, 97.40it/s] 98%|█████████▊| 1680/1706 [00:16<00:00, 100.55it/s] 99%|█████████▉| 1691/1706 [00:17<00:00, 65.45it/s] 100%|█████████▉| 1700/1706 [00:17<00:00, 66.37it/s]100%|██████████| 1706/1706 [00:17<00:00, 98.08it/s]
03/21/2025 22:45:41 - INFO - __main__ -   ***** Debugging Inference on Small Sample *****
/lustre04/scratch/rinao/VulRepair/M2_CodeBERT_PL-NL/codebert_model.py:74: UserWarning: The torch.cuda.*DtypeTensor constructors are no longer recommended. It's best to use methods such as torch.tensor(data, dtype=*, device='cuda') to create tensors. (Triggered internally at /shared_tmp/build_wheels_tmp.73843/python-3.13/torch/torch/csrc/tensor/python_tensor.cpp:78.)
  zero=torch.cuda.LongTensor(1).fill_(0)
03/21/2025 22:45:48 - INFO - __main__ -   ============================================================
03/21/2025 22:45:48 - INFO - __main__ -   Sample #1
03/21/2025 22:45:48 - INFO - __main__ -   Correct Prediction? ❌ NO
03/21/2025 22:45:48 - INFO - __main__ -   
🔹 Input IDs:
[0, 347, 9112, 12, 21397, 49460, 14646, 1215, 6031, 15368, 36, 29916, 3716, 1009, 3716, 4839, 25522, 49460, 5494, 5457, 3950, 2156, 3872, 40311, 5457, 3950, 2156, 295, 4765, 9271, 5457, 3950, 2156, 37390, 417, 5457, 3950, 25606, 16224, 579, 646, 11191, 791, 7881, 41697, 27779, 2156, 1009, 579, 4903, 5457, 48955, 2156, 1009, 786, 1755, 134, 2156, 1009, 1852, 808, 25606, 49133, 1215, 90, 1009, 7398, 5457, 48955, 2156, 1009, 5032, 1215, 6486, 2156, 1009, 22379, 1215, 6486, 25606, 49133, 1215, 44223, 1215, 90, 22379, 25606, 6979, 295, 176, 10799, 25606, 5032, 1397, 4832, 114, 36, 27785, 11808, 1215, 6031, 15368, 1215, 48154, 36, 3716, 4839, 4839, 25522, 37390, 417, 5457, 3950, 25606, 49325, 66, 25606, 35524, 37390, 417, 5457, 1528, 25606, 114, 36, 3872, 40311, 4839, 25522, 699, 1215, 29, 3343, 36, 3716, 4839, 25606, 12631, 506, 36, 579, 2156, 49667, 48669, 113, 808, 48669, 7862, 50267, 207, 417, 6, 50267, 48669, 113, 45416, 48669, 7862, 50267, 48669, 113, 33527, 4, 10936, 36037, 48669, 1297, 50267, 48669, 113, 49237, 48669, 7862, 50267, 48992, 49509, 2156, 3514, 9657, 1215, 808, 48793, 4839, 25606, 35524, 1493, 25522, 114, 36, 3716, 43839, 1852, 808, 4839, 12631, 506, 36, 579, 2156, 49667, 48669, 113, 808, 48669, 7862, 50267, 207, 417, 6, 50267, 48669, 113, 45416, 48669, 7862, 50267, 48669, 113, 33527, 4, 10936, 36037, 48669, 1297, 50267, 48669, 113, 49237, 48669, 7862, 50267, 10975, 48669, 48149, 44561, 14426, 48789, 113, 46394, 7744, 22, 48669, 1297, 50267, 48669, 113, 207, 29, 48669, 42248, 49509, 2156, 3514, 9657, 1215, 808, 48793, 2156, 3716, 43839, 1852, 808, 4839, 25606, 1493, 12631, 506, 36, 579, 2156, 49667, 48669, 113, 808, 48669, 7862, 50267, 207, 417, 6, 50267, 48669, 113, 45416, 48669, 7862, 50267, 48669, 113, 33527, 4, 10936, 36037, 48669, 1297, 50267, 48669, 113, 49237, 48669, 7862, 50267, 10975, 48669, 48149, 44561, 14426, 48789, 113, 46394, 7744, 22, 48669, 42248, 49509, 2156, 3514, 9657, 1215, 808, 48793, 4839, 25606, 35524, 114, 36, 27148, 6031, 15368, 1215, 37785, 36, 3716, 2156, 579, 2156, 7031, 8476, 36, 579, 4839, 4839, 49333, 208, 9309, 1215, 9335, 4839, 25522, 45432, 2154, 36, 34772, 1215, 49837, 2156, 22, 597, 13355, 50267, 560, 50267, 37785, 50267, 29, 50267, 179, 50267, 179, 4933, 877, 1215, 6031, 15368, 113, 4839, 25606, 49325, 66, 25606, 35524, 114, 36, 27785, 37062, 1215, 16320, 36, 3716, 2156, 5885, 47697, 1215, 104, 13181, 8460, 2068, 4839, 4839, 25522, 45432, 2154, 36, 34772, 1215, 49837, 2156, 22, 23031, 196, 50267, 995, 50267, 2739, 2838, 50267, 1990, 50267, 41510, 50267, 179, 50267, 179, 4933, 877, 1215, 6031, 15368, 113, 4839, 25606, 49325, 66, 25606, 35524, 579, 4903, 5457, 3872, 705, 1215, 1902, 36, 3716, 4839, 25606, 114, 36, 27785, 579, 4903, 4839, 49325, 66, 25606, 3872, 40311, 5457, 1528, 25606, 7398, 5457, 47192, 1215, 27822, 104, 36, 579, 4903, 2156, 359, 22379, 4839, 25606, 481, 36, 579, 4903, 4839, 25606, 114, 36, 27785, 7398, 4839, 25522, 45432, 2154, 36, 34772, 1215, 48050, 2156, 22, 49437, 50267, 11127, 4636, 50267, 38323, 1640, 207, 417, 3256, 50267, 207, 29, 113, 2156, 22379, 479, 2]
03/21/2025 22:45:48 - INFO - __main__ -   
🔹 Input Tokens:
<s>CWE-119 bool initiate_stratum ( struct pool * pool ) { bool ret = false , recvd = false , noresume = false , sockd = false ; char s [ RBUFSIZE ] , * sret = NULL , * nonce1 , * sessionid ; json_t * val = NULL , * res_val , * err_val ; json_error_t err ; int n2size ; resend : if ( ! setup_stratum_socket ( pool ) ) { sockd = false ; goto out ; } sockd = true ; if ( recvd ) { clear_sock ( pool ) ; sprintf ( s , "{\\"id\\": <S2SV_blank> %d, <S2SV_blank> \\"method\\": <S2SV_blank> \\"mining.subscribe\\", <S2SV_blank> \\"params\\": <S2SV_blank> []}" , swork_id ++ ) ; } else { if ( pool -> sessionid ) sprintf ( s , "{\\"id\\": <S2SV_blank> %d, <S2SV_blank> \\"method\\": <S2SV_blank> \\"mining.subscribe\\", <S2SV_blank> \\"params\\": <S2SV_blank> [\\"" PACKAGE "/" VERSION "\\", <S2SV_blank> \\"%s\\"]}" , swork_id ++ , pool -> sessionid ) ; else sprintf ( s , "{\\"id\\": <S2SV_blank> %d, <S2SV_blank> \\"method\\": <S2SV_blank> \\"mining.subscribe\\", <S2SV_blank> \\"params\\": <S2SV_blank> [\\"" PACKAGE "/" VERSION "\\"]}" , swork_id ++ ) ; } if ( __stratum_send ( pool , s , strlen ( s ) ) != SEND_OK ) { applog ( LOG_DEBUG , "Failed <S2SV_blank> to <S2SV_blank> send <S2SV_blank> s <S2SV_blank> in <S2SV_blank> initiate_stratum" ) ; goto out ; } if ( ! socket_full ( pool , DEFAULT_SOCKWAIT ) ) { applog ( LOG_DEBUG , "Timed <S2SV_blank> out <S2SV_blank> waiting <S2SV_blank> for <S2SV_blank> response <S2SV_blank> in <S2SV_blank> initiate_stratum" ) ; goto out ; } sret = recv_line ( pool ) ; if ( ! sret ) goto out ; recvd = true ; val = JSON_LOADS ( sret , & err ) ; free ( sret ) ; if ( ! val ) { applog ( LOG_INFO , "JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s" , err .</s>
03/21/2025 22:45:48 - INFO - __main__ -   
🔹 Decoder Input IDs:
[0, 50268, 114, 36, 27785, 8218, 1215, 43726, 36, 786, 1755, 134, 4839, 1437, 50269, 4839, 25522, 45432, 2154, 1437, 50268, 36, 34772, 1215, 48050, 2156, 22, 597, 13355, 50267, 560, 50267, 6460, 50267, 42679, 50267, 13424, 1755, 134, 50267, 179, 50267, 179, 4933, 877, 1215, 6031, 15368, 113, 1437, 50269, 4839, 25606, 481, 1437, 50268, 25606, 114, 36, 295, 176, 10799, 28696, 132, 45056, 295, 176, 10799, 8061, 545, 1437, 50269, 4839, 25522, 45432, 2154, 1437, 50268, 36, 34772, 1215, 48050, 2156, 22, 597, 13355, 50267, 560, 50267, 6460, 50267, 42679, 50267, 282, 176, 10799, 50267, 179, 50267, 179, 4933, 877, 1215, 6031, 15368, 113, 1437, 50269, 4839, 25606, 481, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 22:45:48 - INFO - __main__ -   
🔹 Decoder Input Tokens:
<s> <S2SV_ModStart>  if ( ! valid_hex ( nonce1 )  <S2SV_ModEnd>  ) { applog  <S2SV_ModStart>  ( LOG_INFO , "Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> valid <S2SV_blank> nonce1 <S2SV_blank> in <S2SV_blank> initiate_stratum"  <S2SV_ModEnd>  ) ; free  <S2SV_ModStart>  ; if ( n2size < 2 || n2size > 16  <S2SV_ModEnd>  ) { applog  <S2SV_ModStart>  ( LOG_INFO , "Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> valid <S2SV_blank> n2size <S2SV_blank> in <S2SV_blank> initiate_stratum"  <S2SV_ModEnd>  ) ; free
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 22:45:48 - INFO - __main__ -   
🔹 Prediction:
<S2SV_ModStart>  ; if ( n2size < 1 )  <S2SV_ModEnd>  { applog (
03/21/2025 22:45:48 - INFO - __main__ -   
🔹 Ground Truth:
<S2SV_ModStart>  if ( ! valid_hex ( nonce1 )  <S2SV_ModEnd>  ) { applog  <S2SV_ModStart>  ( LOG_INFO , "Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> valid <S2SV_blank> nonce1 <S2SV_blank> in <S2SV_blank> initiate_stratum"  <S2SV_ModEnd>  ) ; free  <S2SV_ModStart>  ; if ( n2size < 2 || n2size > 16  <S2SV_ModEnd>  ) { applog  <S2SV_ModStart>  ( LOG_INFO , "Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> valid <S2SV_blank> n2size <S2SV_blank> in <S2SV_blank> initiate_stratum"  <S2SV_ModEnd>  ) ; free
03/21/2025 22:45:48 - INFO - __main__ -   ============================================================
03/21/2025 22:46:12 - INFO - __main__ -   ============================================================
03/21/2025 22:46:12 - INFO - __main__ -   Sample #2
03/21/2025 22:46:12 - INFO - __main__ -   Correct Prediction? ❌ NO
03/21/2025 22:46:12 - INFO - __main__ -   
🔹 Input IDs:
[0, 347, 9112, 12, 11338, 13842, 364, 1115, 1215, 17265, 36, 1161, 7779, 41147, 1215, 45012, 1009, 295, 5016, 2156, 5124, 10759, 1717, 1215, 24262, 1009, 46247, 2156, 1717, 1215, 2544, 5933, 4839, 25522, 10759, 29916, 364, 1115, 1215, 26061, 1215, 90, 1009, 364, 1115, 25606, 10759, 1717, 1215, 24262, 1009, 326, 43880, 25606, 1717, 1215, 2544, 326, 8476, 2156, 1907, 2156, 2849, 12528, 25606, 6979, 3212, 5457, 321, 2156, 25528, 25606, 326, 43880, 5457, 46247, 25606, 326, 8476, 5457, 5933, 25606, 364, 1115, 5457, 36, 10759, 29916, 364, 1115, 1215, 26061, 1215, 90, 1009, 4839, 46247, 25606, 19430, 1215, 565, 48692, 36, 1009, 364, 1115, 4839, 25606, 114, 36, 295, 5016, 43839, 295, 5016, 1215, 705, 30160, 28696, 112, 4839, 25522, 19430, 1215, 4454, 17831, 36, 36, 295, 5016, 2156, 49608, 29, 50267, 1640, 207, 257, 43, 50267, 705, 207, 257, 6, 50267, 8476, 50267, 207, 257, 113, 2156, 7, 330, 176, 6031, 36, 364, 1115, 1215, 26061, 1215, 12528, 1215, 43994, 2156, 22, 42230, 113, 2156, 364, 1115, 43839, 1907, 4839, 2156, 364, 1115, 43839, 1907, 2156, 364, 1115, 43839, 1732, 2156, 10649, 6997, 13709, 1215, 1549, 5871, 104, 36, 364, 1115, 43839, 5933, 4839, 4839, 4839, 25606, 671, 25606, 35524, 19430, 1215, 4454, 17831, 36, 36, 295, 5016, 2156, 49608, 29, 50267, 1640, 207, 257, 43, 50267, 705, 207, 257, 6, 50267, 8476, 50267, 207, 257, 113, 2156, 7, 330, 176, 6031, 36, 364, 1115, 1215, 26061, 1215, 12528, 1215, 43994, 2156, 22, 42230, 113, 2156, 364, 1115, 43839, 1907, 4839, 2156, 364, 1115, 43839, 1907, 2156, 364, 1115, 43839, 1732, 2156, 10649, 6997, 13709, 1215, 1549, 5871, 104, 36, 364, 1115, 43839, 5933, 4839, 4839, 4839, 25606, 326, 43880, 49371, 49907, 36, 10759, 29916, 364, 1115, 1215, 26061, 1215, 90, 4839, 25606, 326, 8476, 49826, 49907, 36, 10759, 29916, 364, 1115, 1215, 26061, 1215, 90, 4839, 25606, 5405, 36, 364, 1115, 43839, 1907, 4839, 25522, 403, 381, 591, 1215, 5499, 30104, 1215, 48710, 1215, 510, 14940, 3935, 4832, 1437, 50265, 1907, 5457, 1009, 36, 326, 43880, 4839, 25606, 1437, 50266, 25528, 5457, 10649, 6997, 13709, 1215, 1549, 5871, 104, 36, 326, 43880, 2055, 132, 4839, 25606, 19430, 1215, 4454, 17831, 36, 36, 295, 5016, 2156, 46481, 50267, 207, 29, 50267, 1640, 207, 257, 238, 50267, 808, 50267, 207, 257, 6, 50267, 8476, 50267, 207, 257, 113, 2156, 7, 330, 176, 6031, 36, 364, 1115, 1215, 20414, 1215, 43994, 2156, 22, 42230, 113, 2156, 1907, 4839, 2156, 1907, 2156, 1009, 36, 326, 43880, 2055, 112, 4839, 2156, 25528, 4839, 4839, 25606, 19430, 1215, 565, 48692, 176, 36, 1009, 326, 43880, 2156, 25528, 4839, 25606, 114, 36, 1907, 49230, 132, 4839, 25522, 1437, 50265, 2849, 12528, 5457, 1009, 36, 326, 43880, 2055, 204, 4839, 25606, 1437, 50266, 19430, 1215, 4454, 17831, 36, 36, 295, 5016, 2156, 22, 48669, 282, 48669, 90, 48669, 90, 50267, 40118, 50267, 207, 29, 50267, 1640, 207, 257, 30831, 2156, 1437, 50265, 7, 330, 176, 6031, 36, 364, 1115, 1215, 12528, 1215, 43994, 2156, 22, 42230, 113, 2156, 1009, 36, 326, 43880, 2055, 204, 4839, 2]
03/21/2025 22:46:12 - INFO - __main__ -   
🔹 Input Tokens:
<s>CWE-125 void eap_print ( netdissect_options * ndo , register const u_char * cp , u_int length ) { const struct eap_frame_t * eap ; const u_char * tptr ; u_int tlen , type , subtype ; int count = 0 , len ; tptr = cp ; tlen = length ; eap = ( const struct eap_frame_t * ) cp ; ND_TCHECK ( * eap ) ; if ( ndo -> ndo_vflag < 1 ) { ND_PRINT ( ( ndo , "%s <S2SV_blank> (%u) <S2SV_blank> v%u, <S2SV_blank> len <S2SV_blank> %u" , tok2str ( eap_frame_type_values , "unknown" , eap -> type ) , eap -> type , eap -> version , EXTRACT_16BITS ( eap -> length ) ) ) ; return ; } ND_PRINT ( ( ndo , "%s <S2SV_blank> (%u) <S2SV_blank> v%u, <S2SV_blank> len <S2SV_blank> %u" , tok2str ( eap_frame_type_values , "unknown" , eap -> type ) , eap -> type , eap -> version , EXTRACT_16BITS ( eap -> length ) ) ) ; tptr += sizeof ( const struct eap_frame_t ) ; tlen -= sizeof ( const struct eap_frame_t ) ; switch ( eap -> type ) { case EAP_FRAME_TYPE_PACKET :  <S2SV_StartBug>  type = * ( tptr ) ;  <S2SV_EndBug>  len = EXTRACT_16BITS ( tptr + 2 ) ; ND_PRINT ( ( ndo , ", <S2SV_blank> %s <S2SV_blank> (%u), <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> len <S2SV_blank> %u" , tok2str ( eap_code_values , "unknown" , type ) , type , * ( tptr + 1 ) , len ) ) ; ND_TCHECK2 ( * tptr , len ) ; if ( type <= 2 ) {  <S2SV_StartBug>  subtype = * ( tptr + 4 ) ;  <S2SV_EndBug>  ND_PRINT ( ( ndo , "\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)" ,  <S2SV_StartBug>  tok2str ( eap_type_values , "unknown" , * ( tptr + 4 )</s>
03/21/2025 22:46:12 - INFO - __main__ -   
🔹 Decoder Input IDs:
[0, 50268, 403, 381, 591, 1215, 5499, 30104, 1215, 48710, 1215, 510, 14940, 3935, 4832, 19430, 1215, 565, 48692, 1215, 398, 5871, 104, 36, 326, 43880, 4839, 25606, 1437, 50268, 1009, 36, 326, 43880, 4839, 25606, 19430, 1215, 565, 48692, 1215, 1549, 5871, 104, 36, 326, 43880, 2055, 132, 1437, 50268, 132, 4839, 25522, 19430, 1215, 565, 48692, 1215, 398, 5871, 104, 36, 326, 43880, 2055, 204, 4839, 25606, 1437, 50268, 2156, 22, 42230, 113, 2156, 2849, 12528, 4839, 2156, 2849, 12528, 1437, 50269, 4839, 4839, 25606, 1437, 50268, 25528, 4839, 25522, 19430, 1215, 565, 48692, 1215, 398, 5871, 104, 36, 326, 43880, 2055, 3212, 4839, 25606, 1437, 50268, 403, 381, 591, 1215, 48710, 1215, 14543, 10463, 4832, 403, 381, 591, 1215, 48710, 1215, 565, 10463, 4832, 19430, 1215, 565, 48692, 1215, 398, 5871, 104, 36, 326, 43880, 2055, 195, 4839, 25606, 114, 36, 2849, 12528, 45994, 381, 591, 1215, 48710, 1215, 14543, 10463, 4839, 1437, 50268, 4839, 4839, 25606, 1437, 50269, 19430, 1215, 4454, 17831, 36, 36, 1437, 50268, 4839, 4839, 25522, 19430, 1215, 565, 48692, 1215, 2881, 5871, 104, 36, 326, 43880, 2055, 231, 4839, 25606, 1437, 50268, 403, 381, 591, 1215, 48710, 1215, 597, 10388, 4832, 19430, 1215, 565, 48692, 1215, 398, 5871, 104, 36, 326, 43880, 2055, 195, 4839, 25606, 1437, 50268, 4839, 4839, 25522, 19430, 1215, 565, 48692, 1215, 2881, 5871, 104, 36, 326, 43880, 2055, 231, 4839, 25606, 1437, 50268, 403, 381, 591, 1215, 48710, 1215, 37266, 4832, 19430, 1215, 565, 48692, 1215, 398, 5871, 104, 36, 326, 43880, 2]
03/21/2025 22:46:12 - INFO - __main__ -   
🔹 Decoder Input Tokens:
<s> <S2SV_ModStart>  case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ;  <S2SV_ModStart>  * ( tptr ) ; ND_TCHECK_16BITS ( tptr + 2  <S2SV_ModStart>  2 ) { ND_TCHECK_8BITS ( tptr + 4 ) ;  <S2SV_ModStart>  , "unknown" , subtype ) , subtype  <S2SV_ModEnd>  ) ) ;  <S2SV_ModStart>  len ) { ND_TCHECK_8BITS ( tptr + count ) ;  <S2SV_ModStart>  case EAP_TYPE_TTLS : case EAP_TYPE_TLS : ND_TCHECK_8BITS ( tptr + 5 ) ; if ( subtype == EAP_TYPE_TTLS )  <S2SV_ModStart>  ) ) ;  <S2SV_ModEnd>  ND_PRINT ( (  <S2SV_ModStart>  ) ) { ND_TCHECK_32BITS ( tptr + 6 ) ;  <S2SV_ModStart>  case EAP_TYPE_FAST : ND_TCHECK_8BITS ( tptr + 5 ) ;  <S2SV_ModStart>  ) ) { ND_TCHECK_32BITS ( tptr + 6 ) ;  <S2SV_ModStart>  case EAP_TYPE_SIM : ND_TCHECK_8BITS ( tptr</s>
03/21/2025 22:46:12 - INFO - __main__ -   
🔹 Prediction:

03/21/2025 22:46:12 - INFO - __main__ -   
🔹 Ground Truth:
<S2SV_ModStart>  case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ;  <S2SV_ModStart>  * ( tptr ) ; ND_TCHECK_16BITS ( tptr + 2  <S2SV_ModStart>  2 ) { ND_TCHECK_8BITS ( tptr + 4 ) ;  <S2SV_ModStart>  , "unknown" , subtype ) , subtype  <S2SV_ModEnd>  ) ) ;  <S2SV_ModStart>  len ) { ND_TCHECK_8BITS ( tptr + count ) ;  <S2SV_ModStart>  case EAP_TYPE_TTLS : case EAP_TYPE_TLS : ND_TCHECK_8BITS ( tptr + 5 ) ; if ( subtype == EAP_TYPE_TTLS )  <S2SV_ModStart>  ) ) ;  <S2SV_ModEnd>  ND_PRINT ( (  <S2SV_ModStart>  ) ) { ND_TCHECK_32BITS ( tptr + 6 ) ;  <S2SV_ModStart>  case EAP_TYPE_FAST : ND_TCHECK_8BITS ( tptr + 5 ) ;  <S2SV_ModStart>  ) ) { ND_TCHECK_32BITS ( tptr + 6 ) ;  <S2SV_ModStart>  case EAP_TYPE_SIM : ND_TCHECK_8BITS ( tptr
03/21/2025 22:46:12 - INFO - __main__ -   ============================================================
03/21/2025 22:46:14 - INFO - __main__ -   ============================================================
03/21/2025 22:46:14 - INFO - __main__ -   Sample #3
03/21/2025 22:46:14 - INFO - __main__ -   Correct Prediction? ❌ NO
03/21/2025 22:46:14 - INFO - __main__ -   
🔹 Input IDs:
[0, 347, 9112, 12, 33871, 6979, 43556, 466, 330, 1215, 605, 5408, 1215, 48211, 36, 29916, 885, 5408, 1009, 885, 5408, 2156, 49562, 885, 5408, 1215, 48211, 1215, 808, 49099, 1215, 808, 2156, 1717, 398, 1009, 49099, 1215, 48939, 2156, 1717, 2881, 49099, 1215, 8476, 2156, 1717, 398, 1009, 910, 4182, 1215, 48939, 2156, 1717, 2881, 910, 4182, 1215, 8476, 2156, 1717, 2881, 25386, 4839, 25522, 29916, 43556, 1215, 30826, 1009, 23184, 5457, 885, 5408, 43839, 12402, 705, 1215, 25943, 43839, 23184, 25606, 29916, 43556, 1215, 27278, 1009, 1537, 5457, 43556, 466, 330, 1215, 30826, 1215, 27278, 36, 23184, 4839, 25606, 1717, 1549, 471, 4294, 5457, 49907, 36, 29916, 1368, 42988, 1215, 26061, 1215, 298, 10232, 4839, 2055, 49907, 36, 29916, 885, 5408, 1215, 48211, 1215, 298, 10232, 4839, 25606, 29916, 2972, 1215, 43637, 1009, 2972, 428, 25606, 39023, 251, 86, 1215, 6960, 25606, 6979, 5494, 5457, 321, 25606, 114, 36, 23184, 43839, 23184, 1215, 46760, 359, 30227, 1215, 4154, 7205, 13644, 534, 1691, 4839, 671, 321, 25606, 2972, 428, 5457, 42793, 1215, 7771, 428, 36, 471, 4294, 2055, 49099, 1215, 8476, 2156, 272, 9763, 1215, 2571, 3765, 2371, 4839, 25606, 114, 36, 27785, 2972, 428, 4839, 671, 111, 13245, 3765, 5330, 25606, 2972, 428, 1215, 1535, 14477, 36, 2972, 428, 2156, 471, 4294, 4839, 25606, 114, 36, 49099, 1215, 8476, 49333, 321, 48200, 49099, 1215, 48939, 49333, 48955, 4839, 25522, 2972, 428, 1215, 9179, 1215, 23687, 36, 2972, 428, 2156, 49099, 1215, 48939, 2156, 49099, 1215, 8476, 4839, 25606, 35524, 16119, 3463, 1215, 8292, 36, 359, 885, 5408, 43839, 5963, 1215, 26121, 3463, 4839, 25606, 114, 36, 3752, 36, 885, 5408, 43839, 2294, 4839, 4839, 25522, 5494, 5457, 111, 381, 4454, 33770, 25606, 49325, 66, 25606, 35524, 885, 5408, 43839, 49099, 1215, 338, 4182, 1215, 48939, 5457, 910, 4182, 1215, 48939, 25606, 885, 5408, 43839, 49099, 1215, 338, 4182, 1215, 8476, 5457, 910, 4182, 1215, 8476, 25606, 5494, 5457, 43556, 466, 330, 1215, 605, 5408, 1215, 48211, 1215, 25268, 36, 885, 5408, 2156, 2972, 428, 2156, 49099, 1215, 808, 2156, 49099, 1215, 8476, 4839, 25606, 114, 36, 5494, 4839, 49325, 66, 25606, 86, 1215, 6960, 5457, 2067, 1215, 1990, 1215, 175, 37189, 1215, 49109, 36, 359, 885, 5408, 43839, 49099, 1215, 37405, 2156, 25386, 4839, 25606, 114, 36, 27785, 86, 1215, 6960, 4839, 25522, 43556, 1215, 33845, 571, 36, 1537, 2156, 305, 7539, 2156, 22, 49405, 50267, 2739, 2838, 50267, 1990, 50267, 771, 7539, 50267, 41483, 35, 50267, 207, 29, 48669, 282, 113, 2156, 885, 5408, 1215, 48211, 1215, 560, 1215, 13650, 36, 49099, 1215, 808, 4839, 4839, 25606, 16119, 3463, 1215, 879, 8292, 36, 359, 885, 5408, 43839, 5963, 1215, 26121, 3463, 4839, 25606, 1437, 50265, 671, 111, 4799, 3755, 1691, 29891, 25606, 1437, 50266, 35524, 16119, 3463, 1215, 879, 8292, 36, 359, 885, 5408, 43839, 5963, 1215, 26121, 3463, 4839, 25606, 671, 321, 25606, 66, 4832, 43556, 1215, 33845, 571, 36, 1537, 2156, 305, 7539, 2156, 22, 771, 7539, 50267, 37694, 2407, 50267, 1990, 35, 50267, 207, 29, 48669, 282, 113, 2156, 885, 5408, 1215, 48211, 1215, 560, 2]
03/21/2025 22:46:14 - INFO - __main__ -   
🔹 Input Tokens:
<s>CWE-401 int ath9k_wmi_cmd ( struct wmi * wmi , enum wmi_cmd_id cmd_id , u8 * cmd_buf , u32 cmd_len , u8 * rsp_buf , u32 rsp_len , u32 timeout ) { struct ath_hw * ah = wmi -> drv_priv -> ah ; struct ath_common * common = ath9k_hw_common ( ah ) ; u16 headroom = sizeof ( struct htc_frame_hdr ) + sizeof ( struct wmi_cmd_hdr ) ; struct sk_buff * skb ; unsigned long time_left ; int ret = 0 ; if ( ah -> ah_flags & AH_UNPLUGGED ) return 0 ; skb = alloc_skb ( headroom + cmd_len , GFP_ATOMIC ) ; if ( ! skb ) return - ENOMEM ; skb_reserve ( skb , headroom ) ; if ( cmd_len != 0 && cmd_buf != NULL ) { skb_put_data ( skb , cmd_buf , cmd_len ) ; } mutex_lock ( & wmi -> op_mutex ) ; if ( unlikely ( wmi -> stopped ) ) { ret = - EPROTO ; goto out ; } wmi -> cmd_rsp_buf = rsp_buf ; wmi -> cmd_rsp_len = rsp_len ; ret = ath9k_wmi_cmd_issue ( wmi , skb , cmd_id , cmd_len ) ; if ( ret ) goto out ; time_left = wait_for_completion_timeout ( & wmi -> cmd_wait , timeout ) ; if ( ! time_left ) { ath_dbg ( common , WMI , "Timeout <S2SV_blank> waiting <S2SV_blank> for <S2SV_blank> WMI <S2SV_blank> command: <S2SV_blank> %s\\n" , wmi_cmd_to_name ( cmd_id ) ) ; mutex_unlock ( & wmi -> op_mutex ) ;  <S2SV_StartBug>  return - ETIMEDOUT ;  <S2SV_EndBug>  } mutex_unlock ( & wmi -> op_mutex ) ; return 0 ; out : ath_dbg ( common , WMI , "WMI <S2SV_blank> failure <S2SV_blank> for: <S2SV_blank> %s\\n" , wmi_cmd_to</s>
03/21/2025 22:46:14 - INFO - __main__ -   
🔹 Decoder Input IDs:
[0, 50268, 5963, 1215, 26121, 3463, 4839, 25606, 449, 3743, 1215, 7771, 428, 36, 2972, 428, 4839, 25606, 50121, 50118, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
03/21/2025 22:46:14 - INFO - __main__ -   
🔹 Decoder Input Tokens:
<s> <S2SV_ModStart>  op_mutex ) ; kfree_skb ( skb ) ;
</s><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad><pad>
03/21/2025 22:46:14 - INFO - __main__ -   
🔹 Prediction:
<S2SV_ModStart>  ww ) ; spin_lock_irq ( & bh ) ;
03/21/2025 22:46:14 - INFO - __main__ -   
🔹 Ground Truth:
<S2SV_ModStart>  op_mutex ) ; kfree_skb ( skb ) ;
03/21/2025 22:46:14 - INFO - __main__ -   ============================================================
