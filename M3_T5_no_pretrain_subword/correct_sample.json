{
    "raw_input": "CWE-119 void vp8_cal_sad ( VP8_COMP * cpi , MACROBLOCKD * xd , MACROBLOCK * x , int recon_yoffset , int near_sadidx [ ] ) { int near_sad [ 8 ] = { 0 } ; BLOCK * b = & x -> block [ 0 ] ; unsigned char * src_y_ptr = * ( b -> base_src ) ; if ( xd -> mb_to_top_edge == 0 && xd -> mb_to_left_edge == 0 ) { near_sad [ 0 ] = near_sad [ 1 ] = near_sad [ 2 ] = INT_MAX ; } else if ( xd -> mb_to_top_edge == 0 ) { near_sad [ 0 ] = near_sad [ 2 ] = INT_MAX ; <S2SV_StartBug> near_sad [ 1 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - 16 , xd -> dst . y_stride , UINT_MAX ) ; <S2SV_EndBug> } else if ( xd -> mb_to_left_edge == 0 ) { near_sad [ 1 ] = near_sad [ 2 ] = INT_MAX ; <S2SV_StartBug> near_sad [ 0 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - xd -> dst . y_stride * 16 , xd -> dst . y_stride , UINT_MAX ) ; <S2SV_EndBug> } else { <S2SV_StartBug> near_sad [ 0 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - xd -> dst . y_stride * 16 , xd -> dst . y_stride , UINT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> near_sad [ 1 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - 16 , xd -> dst . y_stride , UINT_MAX ) ; <S2SV_EndBug> <S2SV",
    "tokenized_input": [
        1,
        579,
        22,
        1215,
        561,
        746,
        33,
        72,
        6436,
        72,
        4625,
        267,
        1288,
        33,
        72,
        1726,
        295,
        686,
        269,
        5256,
        295,
        1376,
        269,
        3736,
        295,
        461,
        269,
        365,
        3872,
        72,
        9188,
        269,
        365,
        8855,
        72,
        24770,
        328,
        326,
        266,
        291,
        365,
        8855,
        72,
        4625,
        328,
        605,
        326,
        273,
        291,
        296,
        290,
        268,
        2439,
        295,
        301,
        273,
        302,
        461,
        276,
        1385,
        328,
        296,
        326,
        268,
        520,
        462,
        295,
        890,
        72,
        98,
        72,
        519,
        273,
        295,
        267,
        301,
        276,
        1348,
        72,
        1997,
        266,
        268,
        287,
        267,
        1376,
        276,
        1023,
        72,
        336,
        72,
        1708,
        72,
        7137,
        348,
        296,
        431,
        1376,
        276,
        1023,
        72,
        336,
        72,
        1435,
        72,
        7137,
        348,
        296,
        266,
        291,
        8855,
        72,
        4625,
        328,
        296,
        326,
        273,
        8855,
        72,
        4625,
        328,
        317,
        326,
        273,
        8855,
        72,
        4625,
        328,
        433,
        326,
        273,
        1650,
        72,
        945,
        268,
        290,
        408,
        287,
        267,
        1376,
        276,
        1023,
        72,
        336,
        72,
        1708,
        72,
        7137,
        348,
        296,
        266,
        291,
        8855,
        72,
        4625,
        328,
        296,
        326,
        273,
        8855,
        72,
        4625,
        328,
        433,
        326,
        273,
        1650,
        72,
        945,
        268,
        288,
        60,
        27,
        272,
        72,
        398,
        39,
        8855,
        72,
        4625,
        328,
        317,
        326,
        273,
        686,
        276,
        3456,
        72,
        519,
        328,
        2439,
        72,
        569,
        65,
        569,
        326,
        300,
        21806,
        267,
        890,
        72,
        98,
        72,
        519,
        269,
        301,
        276,
        890,
        72,
        1536,
        269,
        1376,
        276,
        699,
        300,
        448,
        72,
        792,
        271,
        1020,
        269,
        1376,
        276,
        699,
        300,
        448,
        72,
        1536,
        269,
        2466,
        72,
        945,
        266,
        268,
        288,
        60,
        27,
        272,
        72,
        399,
        39,
        290,
        408,
        287,
        267,
        1376,
        276,
        1023,
        72,
        336,
        72,
        1435,
        72,
        7137,
        348,
        296,
        266,
        291,
        8855,
        72,
        4625,
        328,
        317,
        326,
        273,
        8855,
        72,
        4625,
        328,
        433,
        326,
        273,
        1650,
        72,
        945,
        268,
        288,
        60,
        27,
        272,
        72,
        398,
        39,
        8855,
        72,
        4625,
        328,
        296,
        326,
        273,
        686,
        276,
        3456,
        72,
        519,
        328,
        2439,
        72,
        569,
        65,
        569,
        326,
        300,
        21806,
        267,
        890,
        72,
        98,
        72,
        519,
        269,
        301,
        276,
        890,
        72,
        1536,
        269,
        1376,
        276,
        699,
        300,
        448,
        72,
        792,
        271,
        1376,
        276,
        699,
        300,
        448,
        72,
        1536,
        295,
        1020,
        269,
        1376,
        276,
        699,
        300,
        448,
        72,
        1536,
        269,
        2466,
        72,
        945,
        266,
        268,
        288,
        60,
        27,
        272,
        72,
        399,
        39,
        290,
        408,
        291,
        288,
        60,
        27,
        272,
        72,
        398,
        39,
        8855,
        72,
        4625,
        328,
        296,
        326,
        273,
        686,
        276,
        3456,
        72,
        519,
        328,
        2439,
        72,
        569,
        65,
        569,
        326,
        300,
        21806,
        267,
        890,
        72,
        98,
        72,
        519,
        269,
        301,
        276,
        890,
        72,
        1536,
        269,
        1376,
        276,
        699,
        300,
        448,
        72,
        792,
        271,
        1376,
        276,
        699,
        300,
        448,
        72,
        1536,
        295,
        1020,
        269,
        1376,
        276,
        699,
        300,
        448,
        72,
        1536,
        269,
        2466,
        72,
        945,
        266,
        268,
        288,
        60,
        27,
        272,
        72,
        399,
        39,
        288,
        60,
        27,
        272,
        72,
        398,
        39,
        8855,
        72,
        4625,
        328,
        317,
        326,
        273,
        686,
        276,
        3456,
        72,
        519,
        328,
        2439,
        72,
        569,
        65,
        569,
        326,
        300,
        21806,
        267,
        890,
        72,
        98,
        72,
        519,
        269,
        301,
        276,
        890,
        72,
        1536,
        269,
        1376,
        276,
        699,
        300,
        448,
        72,
        792,
        271,
        1020,
        269,
        1376,
        276,
        699,
        300,
        448,
        72,
        1536,
        269,
        2466,
        72,
        945,
        266,
        268,
        288,
        60,
        27,
        272,
        72,
        399,
        39,
        288,
        60,
        27,
        272,
        2
    ],
    "beam_candidates": [
        "",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart> <S2SV_null> <S2SV_null> static\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( 16 , <S2SV_ModStart> 16 ) ; vpx_ <S2SV_ModEnd> ( src_ptr\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_ <S2SV_ModEnd> ( src_ptr\n",
        "<S2SV_ModStart> . y_stride ; ( void ) cpi ; <S2SV_ModStart> ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr , <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr ,\n",
        "<S2SV_ModStart> . y_stride ; ( void ) cpi ; <S2SV_ModStart> ) ; vpx_mse16x16 <S2SV_ModEnd> ( src , <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr ,\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( 16 , <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr ,\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr ,\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( 16 , <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_ <S2SV_ModEnd> ( src_ptr\n",
        "unpred<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( 16 , <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr ,\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16 <S2SV_ModEnd> ( src_ptr ,\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_ <S2SV_ModEnd> ( src_ptr\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( 16 , <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src ,\n",
        "unpred<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( 16 , <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src ,\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_ <S2SV_ModEnd> ( src_ptr ,\n",
        "unpred<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr ,\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_sad16x16 <S2SV_ModEnd> ( 16 , <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr ,\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src ,\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_sad16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr ,\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_sad16x16 <S2SV_ModEnd> ( src_ptr ,\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( 16 , <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_stride ,\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_sad16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr ,\n",
        "unpred<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src ,\n",
        "<S2SV_ModStart>\n",
        "<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr , <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr ,\n",
        "<S2SV_ModStart> . y_stride ; ( void ) cpi ; <S2SV_ModStart> ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr , <S2SV_ModStart> 16 ) { memcpy <S2SV_ModEnd> ( src_ptr , <S2SV_ModStart> src_stride ) ; memcpy <S2SV_ModEnd> ( src ,\n",
        "unpred<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16 <S2SV_ModEnd> ( src_ptr ,\n",
        "<S2SV_ModStart> <S2SV_null> <S2SV_null> static\n",
        "unpred<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_mse16x16 <S2SV_ModEnd> ( 16 , <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src ->\n",
        "unpred<S2SV_ModStart> & cpi -> td . <S2SV_ModStart> ; vpx_sad16x16 <S2SV_ModEnd> ( 16 , <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src . <S2SV_ModStart> 16 ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr ,\n"
    ],
    "ground_truth": "<S2SV_ModStart> dst . y_stride <S2SV_ModEnd> ) ; } <S2SV_ModStart> dst . y_stride <S2SV_ModEnd> ) ; } <S2SV_ModStart> dst . y_stride <S2SV_ModEnd> ) ; near_sad <S2SV_ModStart> dst . y_stride <S2SV_ModEnd> ) ; near_sad <S2SV_ModStart> dst . y_stride <S2SV_ModEnd> ) ; } <S2SV_ModStart> 16 , pre_y_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> 16 , pre_y_stride <S2SV_ModEnd> ) ; near_sad <S2SV_ModStart> pre_y_buffer , pre_y_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> 16 , pre_y_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> 16 , pre_y_stride <S2SV_ModEnd> ) ; }\n",
    "selected_output": null
}