{
    "raw_input": "CWE - 119 static void ( * best_mode , int this_rd , * rd , int other_cost , MACROBLOCK * x ) { MB_PREDICTION_MODE this_mode = x -> e_mbd . mode_info_context -> mbmi . mode ; other_cost += x -> ref_frame_cost [ x -> e_mbd . mode_info_context -> mbmi . ref_frame ] ; best_mode -> = RDCOST ( x -> rdmult , x -> rddiv , ( rd -> rate2 - rd -> rate_uv - other_cost ) , ( rd -> distortion2 - rd -> distortion_uv ) ) ; best_mode -> rd = this_rd ; vpx_memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; vpx_memcpy ( & best_mode -> partition , x -> , sizeof ( ) ) ; if ( ( this_mode == B_PRED ) || ( this_mode == SPLITMV ) ) { int i ; for ( i = 0 ; i < 16 ; i ++ ) { best_mode -> [ i ] = x -> e_mbd . block [ i ] . bmi ; } } }",
    "tokenized_input": [
        1,
        77,
        32,
        183,
        98,
        74,
        3,
        13,
        3,
        25,
        4122,
        15,
        37,
        2160,
        15,
        3,
        25,
        1691,
        15,
        37,
        29994,
        15,
        1829,
        25,
        84,
        12,
        23,
        4560,
        2459,
        19,
        84,
        17,
        765,
        26,
        1527,
        17,
        392,
        26,
        230,
        14,
        29994,
        72,
        84,
        17,
        25781,
        30,
        84,
        17,
        765,
        26,
        1527,
        17,
        392,
        26,
        771,
        29,
        14,
        4122,
        17,
        3,
        19,
        2766,
        13,
        84,
        17,
        1969,
        15,
        84,
        17,
        2272,
        15,
        13,
        1691,
        17,
        1996,
        32,
        1691,
        17,
        5430,
        32,
        29994,
        12,
        15,
        13,
        1691,
        17,
        2910,
        32,
        1691,
        17,
        8312,
        12,
        12,
        14,
        4122,
        17,
        1691,
        19,
        2160,
        14,
        5,
        1884,
        13,
        28,
        4122,
        17,
        15804,
        15,
        28,
        84,
        17,
        765,
        26,
        1527,
        17,
        392,
        15,
        61,
        13,
        3758,
        12,
        12,
        14,
        6,
        5,
        1884,
        13,
        28,
        4122,
        17,
        2690,
        15,
        84,
        17,
        3,
        15,
        61,
        13,
        3,
        12,
        12,
        14,
        6,
        21,
        13,
        13,
        2459,
        34,
        12373,
        12,
        64,
        13,
        2459,
        34,
        14170,
        12,
        12,
        23,
        37,
        36,
        14,
        71,
        13,
        36,
        19,
        27,
        14,
        36,
        16,
        164,
        14,
        36,
        54,
        12,
        23,
        4122,
        17,
        3,
        30,
        36,
        29,
        19,
        84,
        17,
        765,
        26,
        426,
        30,
        36,
        29,
        26,
        1831,
        14,
        22,
        22,
        22,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ],
    "beam_candidates": [
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode",
        "= this_rd ;",
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode 0",
        "= this_rd ; ++",
        "= this_rd ; memcpy ( & best_mode , sizeof (",
        "= this_rd ; memcpy ( & x -> e_mbd . mode_info_context -> mbmi ,",
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode -> partition , x ->",
        "= this_rd ; if (",
        "= this_rd ; crypto_report_kpp (",
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode , sizeof (",
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode 3",
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode int",
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode -> partition , n ->",
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode -> partition , EXTRACT_16BITS ->",
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode sizeof (",
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode",
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode -> partition , sizeof (",
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode . mode_info_context -> mbmi . ref_frame",
        "= this_rd ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode 0",
        "= this_rd ; memcpy ( & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode 0",
        "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode",
        "= this_rd ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode -> partition , x ->",
        "= this_rd ; memcpy ( & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode -> partition , x ->",
        "= this_rd ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode",
        "= this_rd ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode -> partition , n ->",
        "= this_rd ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode . mode_info_context -> mbmi . ref_frame",
        "= this_rd ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode . mode_info_context -> mbmi . ref_frame ] =",
        "= this_rd ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode ( & best_mode -> partition , x",
        "= this_rd ; memcpy ( & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & x -> e_mbd . mode_info_context -> partition , sizeof ( ) ) ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi . ref_frame , sizeof (",
        "= this_rd ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode -> partition , x -> , sizeof ( ) ) ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi . ref_frame , sizeof (",
        "= this_rd ; memcpy ( & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & x -> e_mbd . mode_info_context -> partition , sizeof ( ) ) ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( ) ) ; memcpy ( & x -> e_mbd . mode_info_context -> mbmi . ref_frame , sizeof (",
        "= this_rd ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode -> partition , x -> , sizeof ( ) ) ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( ) ) ; memcpy ( & best_mode",
        "= this_rd ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode -> partition , x -> , sizeof ( ) ) ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( ) ) ; memcpy ( & best_mode -> l_py0 , & x -> e_mbd . mode_info_context -> mbmi . ref_frame , sizeof (",
        "= this_rd ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode -> partition , x -> , sizeof ( ) ) ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( ) ) ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof (",
        "= this_rd ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; memcpy ( & best_mode -> partition , x -> , sizeof ( ) ) ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( ) ) ; memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi . ref_frame , sizeof (",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ;",
        "= this_rd ; ++"
    ],
    "ground_truth": "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode",
    "selected_output": "= this_rd ; memcpy ( & best_mode ) ) ; memcpy ( & best_mode"
}