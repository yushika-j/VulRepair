{
    "raw_input": "CWE-119 void vp8_cal_sad ( VP8_COMP * cpi , MACROBLOCKD * xd , MACROBLOCK * x , int recon_yoffset , int near_sadidx [ ] ) { int near_sad [ 8 ] = { 0 } ; BLOCK * b = & x -> block [ 0 ] ; unsigned char * src_y_ptr = * ( b -> base_src ) ; if ( xd -> mb_to_top_edge == 0 && xd -> mb_to_left_edge == 0 ) { near_sad [ 0 ] = near_sad [ 1 ] = near_sad [ 2 ] = INT_MAX ; } else if ( xd -> mb_to_top_edge == 0 ) { near_sad [ 0 ] = near_sad [ 2 ] = INT_MAX ;  <S2SV_StartBug>  near_sad [ 1 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - 16 , xd -> dst . y_stride , UINT_MAX ) ;  <S2SV_EndBug>  } else if ( xd -> mb_to_left_edge == 0 ) { near_sad [ 1 ] = near_sad [ 2 ] = INT_MAX ;  <S2SV_StartBug>  near_sad [ 0 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - xd -> dst . y_stride * 16 , xd -> dst . y_stride , UINT_MAX ) ;  <S2SV_EndBug>  } else {  <S2SV_StartBug>  near_sad [ 0 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - xd -> dst . y_stride * 16 , xd -> dst . y_stride , UINT_MAX ) ;  <S2SV_EndBug>   <S2SV_StartBug>  near_sad [ 1 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride",
    "tokenized_input": [
        0,
        347,
        9112,
        12,
        21397,
        13842,
        748,
        642,
        398,
        1215,
        11762,
        1215,
        29,
        625,
        36,
        13913,
        398,
        1215,
        10370,
        510,
        1009,
        740,
        19581,
        2156,
        19482,
        8727,
        7976,
        13181,
        495,
        1009,
        3023,
        417,
        2156,
        19482,
        8727,
        7976,
        13181,
        1009,
        3023,
        2156,
        6979,
        16689,
        1215,
        219,
        48025,
        2156,
        6979,
        583,
        1215,
        29,
        625,
        808,
        1178,
        646,
        27779,
        4839,
        25522,
        6979,
        583,
        1215,
        29,
        625,
        646,
        290,
        27779,
        5457,
        25522,
        321,
        35524,
        25606,
        12413,
        13181,
        1009,
        741,
        5457,
        359,
        3023,
        43839,
        1803,
        646,
        321,
        27779,
        25606,
        39023,
        16224,
        1009,
        47215,
        1215,
        219,
        1215,
        43880,
        5457,
        1009,
        36,
        741,
        43839,
        1542,
        1215,
        45692,
        4839,
        25606,
        114,
        36,
        3023,
        417,
        43839,
        475,
        428,
        1215,
        560,
        1215,
        8766,
        1215,
        14724,
        45994,
        321,
        48200,
        3023,
        417,
        43839,
        475,
        428,
        1215,
        560,
        1215,
        6960,
        1215,
        14724,
        45994,
        321,
        4839,
        25522,
        583,
        1215,
        29,
        625,
        646,
        321,
        27779,
        5457,
        583,
        1215,
        29,
        625,
        646,
        112,
        27779,
        5457,
        583,
        1215,
        29,
        625,
        646,
        132,
        27779,
        5457,
        30497,
        1215,
        30187,
        25606,
        35524,
        1493,
        114,
        36,
        3023,
        417,
        43839,
        475,
        428,
        1215,
        560,
        1215,
        8766,
        1215,
        14724,
        45994,
        321,
        4839,
        25522,
        583,
        1215,
        29,
        625,
        646,
        321,
        27779,
        5457,
        583,
        1215,
        29,
        625,
        646,
        132,
        27779,
        5457,
        30497,
        1215,
        30187,
        25606,
        1437,
        50265,
        583,
        1215,
        29,
        625,
        646,
        112,
        27779,
        5457,
        740,
        19581,
        43839,
        48930,
        1215,
        43880,
        646,
        12413,
        13181,
        1215,
        1549,
        1000,
        1549,
        27779,
        479,
        579,
        36807,
        36,
        47215,
        1215,
        219,
        1215,
        43880,
        2156,
        741,
        43839,
        47215,
        1215,
        6031,
        1949,
        2156,
        3023,
        417,
        43839,
        49339,
        479,
        1423,
        1215,
        47438,
        111,
        545,
        2156,
        3023,
        417,
        43839,
        49339,
        479,
        1423,
        1215,
        6031,
        1949,
        2156,
        121,
        17831,
        1215,
        30187,
        4839,
        25606,
        1437,
        50266,
        35524,
        1493,
        114,
        36,
        3023,
        417,
        43839,
        475,
        428,
        1215,
        560,
        1215,
        6960,
        1215,
        14724,
        45994,
        321,
        4839,
        25522,
        583,
        1215,
        29,
        625,
        646,
        112,
        27779,
        5457,
        583,
        1215,
        29,
        625,
        646,
        132,
        27779,
        5457,
        30497,
        1215,
        30187,
        25606,
        1437,
        50265,
        583,
        1215,
        29,
        625,
        646,
        321,
        27779,
        5457,
        740,
        19581,
        43839,
        48930,
        1215,
        43880,
        646,
        12413,
        13181,
        1215,
        1549,
        1000,
        1549,
        27779,
        479,
        579,
        36807,
        36,
        47215,
        1215,
        219,
        1215,
        43880,
        2156,
        741,
        43839,
        47215,
        1215,
        6031,
        1949,
        2156,
        3023,
        417,
        43839,
        49339,
        479,
        1423,
        1215,
        47438,
        111,
        3023,
        417,
        43839,
        49339,
        479,
        1423,
        1215,
        6031,
        1949,
        1009,
        545,
        2156,
        3023,
        417,
        43839,
        49339,
        479,
        1423,
        1215,
        6031,
        1949,
        2156,
        121,
        17831,
        1215,
        30187,
        4839,
        25606,
        1437,
        50266,
        35524,
        1493,
        25522,
        1437,
        50265,
        583,
        1215,
        29,
        625,
        646,
        321,
        27779,
        5457,
        740,
        19581,
        43839,
        48930,
        1215,
        43880,
        646,
        12413,
        13181,
        1215,
        1549,
        1000,
        1549,
        27779,
        479,
        579,
        36807,
        36,
        47215,
        1215,
        219,
        1215,
        43880,
        2156,
        741,
        43839,
        47215,
        1215,
        6031,
        1949,
        2156,
        3023,
        417,
        43839,
        49339,
        479,
        1423,
        1215,
        47438,
        111,
        3023,
        417,
        43839,
        49339,
        479,
        1423,
        1215,
        6031,
        1949,
        1009,
        545,
        2156,
        3023,
        417,
        43839,
        49339,
        479,
        1423,
        1215,
        6031,
        1949,
        2156,
        121,
        17831,
        1215,
        30187,
        4839,
        25606,
        1437,
        50266,
        1437,
        50265,
        583,
        1215,
        29,
        625,
        646,
        112,
        27779,
        5457,
        740,
        19581,
        43839,
        48930,
        1215,
        43880,
        646,
        12413,
        13181,
        1215,
        1549,
        1000,
        1549,
        27779,
        479,
        579,
        36807,
        36,
        47215,
        1215,
        219,
        1215,
        43880,
        2156,
        741,
        43839,
        47215,
        1215,
        6031,
        1949,
        2
    ],
    "beam_candidates": [
        "\n",
        "<S2SV_ModStart>  = 0 ;  <S2SV_ModEnd>  } <S2SV_null> <S2SV_null> static\n",
        "<S2SV_ModStart>  = 0 ;  <S2SV_ModEnd>  } } <S2SV_null> <S2SV_null> static\n",
        "<S2SV_ModStart>  = 0 ;  <S2SV_ModEnd>  } <S2SV_null> <S2SV_null>\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static\n",
        "<S2SV_ModStart>  ; int err = 0 ;  <S2SV_ModEnd>  if (\n",
        "<S2SV_ModStart>  ; int error = 0  <S2SV_ModEnd>  ; } <S2SV_null> <S2SV_null> static\n",
        "<S2SV_ModStart>  = 0 ; memset  <S2SV_ModEnd>  ( & cpi ->\n",
        "<S2SV_ModStart>  = 0 ;  <S2SV_ModEnd>  } } <S2SV_null> <S2SV_null>\n",
        "<S2SV_ModStart>  ; if ( TEMP_FAILURE_RETRY (  <S2SV_ModEnd>  ) )\n",
        "<S2SV_ModStart>  = 0 ;  <S2SV_ModEnd>  } <S2SV_null> static\n",
        "<S2SV_ModStart>  = 0 ; memset  <S2SV_ModEnd>  ( &  <S2SV_ModEnd>  , 0 ,\n",
        "<S2SV_ModStart>  ; int error = 0  <S2SV_ModEnd>  ; } <S2SV_null> <S2SV_null> <S2SV_null> static\n",
        "<S2SV_ModStart>  = 0 ;  <S2SV_ModEnd>  } <S2SV_null> <S2SV_null> <SV_null> static\n",
        "<S2SV_ModStart>  ; int error = 0  <S2SV_ModEnd>  ; } <S2SV_null> <S2SV_null>\n",
        "<S2SV_ModStart>  = 0 ;  <S2SV_ModEnd>  } } <S2SV_null> <S2SV_null> <SV_null> static\n",
        "<S2SV_ModStart>  ; int error = 0  <S2SV_ModEnd>  ; } <S2SV_null> <S2SV_null> <S2SV_null>\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null>\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  vpx_read_mode (  <S2SV_ModEnd>  ,  <S2SV_ModEnd>  ) ; if\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; if\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; if (\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; if (  <S2SV_ModStart>  ) { return 0 ; }\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; if (  <S2SV_ModStart>  0 ) { return 0 ; }\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; if (  <S2SV_ModStart>  ) { return - 1 ; }\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; if (  <S2SV_ModStart>  0 ) { return - 1 ; }\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; if (  <S2SV_ModStart>  ) { return - 1 ; }  <S2SV_ModEnd>  if (\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; if (  <S2SV_ModStart>  0 ) { return 0 ; }  <S2SV_ModEnd>  if (\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; if (  <S2SV_ModStart>  0 ) { return NULL ; }  <S2SV_ModEnd>  if (\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; if (  <S2SV_ModStart>  0 ) { return - 1 ; }  <S2SV_ModEnd>  if (\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; if (  <S2SV_ModStart>  0 ) { return - 1 ; } }  <S2SV_ModEnd>  if (\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ;\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ; if\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ; }\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ;\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset  <S2SV_ModEnd>  ( & ctx ->  <S2SV_ModEnd>  , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ; if\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ;  <S2SV_ModEnd>  } return\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ;  <S2SV_ModEnd>  } if\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ; }  <S2SV_ModEnd>  if\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset  <S2SV_ModEnd>  ( & ctx ->  <S2SV_ModEnd>  , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ; }  <S2SV_ModEnd>  if\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ;  <S2SV_ModEnd>  if\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) {  <S2SV_ModStart>  = 0 ; } }\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) {  <S2SV_ModStart>  = 0 ; } } else { memset ( & ctx ->\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ;  <S2SV_ModStart>  = 0 ; } } else { memset ( & ctx ->\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) {  <S2SV_ModStart>  = 0 ; } else { memset ( & ctx ->\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ;  <S2SV_ModStart>  } } } else { memset ( & ctx ->\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) {  <S2SV_ModStart>  = 0 ; } } else { memset ( & cpi ->\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) {  <S2SV_ModStart>  = 0 ; } else { memset ( & cpi ->\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ;  <S2SV_ModStart>  } } } else { memset  <S2SV_ModEnd>  ( & ctx ->\n",
        "<S2SV_ModStart>  <S2SV_null> <S2SV_null> <S2SV_null> static  <S2SV_ModEnd>  int error2SV_null> <S2SV_null> static PREDICTION_MODE  <S2SV_ModEnd>  ; memset ( &  <S2SV_ModEnd>  , 0 , 0 , 0 , sizeof ( struct  <S2SV_ModEnd>  ) ) ;  <S2SV_ModStart>  = 0 ; } } else { memset ( & cpi ->\n"
    ],
    "ground_truth": "<S2SV_ModStart>  dst . y_stride  <S2SV_ModEnd>  ) ; }  <S2SV_ModStart>  dst . y_stride  <S2SV_ModEnd>  ) ; }  <S2SV_ModStart>  dst . y_stride  <S2SV_ModEnd>  ) ; near_sad  <S2SV_ModStart>  dst . y_stride  <S2SV_ModEnd>  ) ; near_sad  <S2SV_ModStart>  dst . y_stride  <S2SV_ModEnd>  ) ; }  <S2SV_ModStart>  16 , pre_y_stride  <S2SV_ModEnd>  ) ; if  <S2SV_ModStart>  16 , pre_y_stride  <S2SV_ModEnd>  ) ; near_sad  <S2SV_ModStart>  pre_y_buffer , pre_y_stride  <S2SV_ModEnd>  ) ; if  <S2SV_ModStart>  16 , pre_y_stride  <S2SV_ModEnd>  ) ; if  <S2SV_ModStart>  16 , pre_y_stride  <S2SV_ModEnd>  ) ; }\n",
    "selected_output": null
}